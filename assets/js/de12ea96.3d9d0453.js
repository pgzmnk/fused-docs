"use strict";(self.webpackChunkfused_docs=self.webpackChunkfused_docs||[]).push([[9132],{2581:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>d,default:()=>f,frontMatter:()=>o,metadata:()=>l,toc:()=>h});var a=t(4848),r=t(8453),i=t(8987),s=t(1023);t(290);const o={title:"Create gif from NOAA GOES",sidebar_label:"Create gif",path:"basics/tutorials/noaa/noaa",nb_path:"basics/tutorials/noaa.ipynb",github:"https://github.com/fusedio/fused-docs/blob/main/docs/basics/tutorials/noaa.ipynb",colab:"https://githubtocolab.com/fusedio/fused-docs/blob/main/docs/basics/tutorials/noaa.ipynb",description:"Tutorial on how to create a gif from NOAA GOES satellite images with Fused."},d="NOAA gif generator",l={id:"basics/tutorials/noaa/Noaa",title:"Create gif from NOAA GOES",description:"Tutorial on how to create a gif from NOAA GOES satellite images with Fused.",source:"@site/docs/basics/tutorials/noaa/Noaa.mdx",sourceDirName:"basics/tutorials/noaa",slug:"/basics/tutorials/noaa/",permalink:"/fused-docs/basics/tutorials/noaa/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"Create gif from NOAA GOES",sidebar_label:"Create gif",path:"basics/tutorials/noaa/noaa",nb_path:"basics/tutorials/noaa.ipynb",github:"https://github.com/fusedio/fused-docs/blob/main/docs/basics/tutorials/noaa.ipynb",colab:"https://githubtocolab.com/fusedio/fused-docs/blob/main/docs/basics/tutorials/noaa.ipynb",description:"Tutorial on how to create a gif from NOAA GOES satellite images with Fused."},sidebar:"tutorialSidebar",previous:{title:"Login",permalink:"/fused-docs/basics/tutorials/login/"},next:{title:"NYC Taxi OD",permalink:"/fused-docs/basics/tutorials/nyc-taxy-od"}},c={},h=[{value:"1. Housekeeping",id:"1-housekeeping",level:2},{value:"1.1 Imports",id:"11-imports",level:3},{value:"1.2 Authenticate",id:"12-authenticate",level:3},{value:"2. Define input parameters to customize gif",id:"2-define-input-parameters-to-customize-gif",level:2},{value:"2.1 Set datetime range",id:"21-set-datetime-range",level:3},{value:"2.2 Set bounds for area of interest (AOI)",id:"22-set-bounds-for-area-of-interest-aoi",level:3},{value:"3. Generate frames from band 8 of the GOES-18 dataset",id:"3-generate-frames-from-band-8-of-the-goes-18-dataset",level:2},{value:"3.1 Structure parameters",id:"31-structure-parameters",level:3},{value:"3.2 Define and preview functions that create the array from NOAA imagery \ud83d\udef0\ufe0f",id:"32-define-and-preview-functions-that-create-the-array-from-noaa-imagery-\ufe0f",level:3},{value:"3.2.1 UDF to determine how to subsample array",id:"321-udf-to-determine-how-to-subsample-array",level:4},{value:"3.2.2 UDF to subsample array",id:"322-udf-to-subsample-array",level:4},{value:"3.3 Now run in parallel \u26a1",id:"33-now-run-in-parallel-",level:3},{value:"4. Stitch gif",id:"4-stitch-gif",level:2}];function u(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",ul:"ul",...(0,r.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(i.A,{githubUrl:"https://github.com/fusedio/fused-docs/blob/main/docs/basics/tutorials/noaa.ipynb",colabUrl:"https://githubtocolab.com/fusedio/fused-docs/blob/main/docs/basics/tutorials/noaa.ipynb"}),"\n",(0,a.jsx)(n.h1,{id:"noaa-gif-generator",children:"NOAA gif generator"}),"\n",(0,a.jsx)(n.p,{children:"Note: steps in this notebook require authentication to Fused and access to Workbench."}),"\n",(0,a.jsxs)(n.p,{children:["NOAA publishes the\n",(0,a.jsx)(n.a,{href:"https://www.ncei.noaa.gov/access/metadata/landing-page/bin/iso?id=gov.noaa.ncdc:C01502",children:"ABI-L2-CMIPF"}),"\ndataset and its different bands in an S3 bucket that can be accessed with ",(0,a.jsx)(n.code,{children:"rioxarray"}),"."]}),"\n",(0,a.jsx)(n.p,{children:"This notebook generates a gif from frames in that dataset. It's structured to run as a\nworkflow that creates custom gifs and to describe each step of methodology. The\nfunctionality of this workflow is also showcased as an interactive Streamlit demo app."}),"\n",(0,a.jsxs)(n.p,{children:["In short, a user first defines the bounds an area of interest and date range, then runs\nthe workflow to create a gif file. A Fused ",(0,a.jsx)(n.a,{href:"https://docs.fused.io/",children:"UDF"})," reads NOAA's S3\nbucket in parallel, and this Notebook's stitches them together - at 6 frames per hour of\ndata. All data is processed on the fly and can be cached for subsequent runs."]}),"\n",(0,a.jsx)(n.h2,{id:"1-housekeeping",children:"1. Housekeeping"}),"\n",(0,a.jsxs)(n.p,{children:["This notebook calls two ",(0,a.jsx)(n.em,{children:"User Defined Functions (UDFs)"})," via the ",(0,a.jsx)(n.em,{children:"Fused hosted API"})," to\nfetch data and take advantage of cloud parallelization, then locally runs helper\nfunctions to stitch the returned arrays together into an exportable file. The Fused\ncloud is used for the execution advantages - and the code it runs is open and\nmodifiable. You can view, run, and copy the two UDFs (named ",(0,a.jsx)(n.code,{children:"GOES_18_Async"})," and\n",(0,a.jsx)(n.code,{children:"GOES_18_Partitions"}),") in the ",(0,a.jsx)(n.a,{href:"https://app.fused.io/workbench",children:"Fused Workbench"}),", or\nwithin a Notebook cell as shown below."]}),"\n",(0,a.jsx)(n.p,{children:"The following housekeeping cells declare imports and authenticate with Fused API."}),"\n",(0,a.jsx)(n.h3,{id:"11-imports",children:"1.1 Imports"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# !pip install fused geopandas imageio ipywidgets shapely -q\n"})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"import base64\nimport datetime\nimport json\nfrom typing import Any, List\n\nimport fused\nimport geopandas as gpd\nimport imageio\nimport ipywidgets as widgets\nimport numpy as np\nfrom fused import NotebookCredentials\nfrom IPython.display import Image\nfrom shapely.geometry import Polygon\n\nfused.options.request_timeout = 120\n"})}),"\n",(0,a.jsx)(n.h3,{id:"12-authenticate",children:"1.2 Authenticate"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# To authenticate to the Fused API, copy the token from the URL shown in this cell's output\ncredentials = NotebookCredentials()\n"})}),"\n",(0,a.jsx)(n.p,{children:"Please open this link to authenticate with Fused:"}),"\n",(0,a.jsxs)(n.ul,{children:["\n",(0,a.jsx)(n.li,{children:(0,a.jsx)(n.a,{href:"https://dev-tjcykxcetrz6bps6.us.auth0.com/authorize?audience=fused-python-api&scope=openid+email+name+offline_access&response_type=code&client_id=CXiwKZQmmyo0rqXZY7pzBgfsF7AL2A9l&redirect_uri=https%3A%2F%2Fapp.fused.io%2Fnotebook_login_redirect&code_challenge_method=S256&code_challenge=1uVlntkglPd87eZGDEmw4c2q2vAxVMi0ubAjEN7FfTQ",children:"https://dev-tjcykxcetrz6bps6.us.auth0.com/authorize?audience=fused-python-api&scope=openid+email+name+offline_access&response_type=code&client_id=CXiwKZQmmyo0rqXZY7pzBgfsF7AL2A9l&redirect_uri=https%3A%2F%2Fapp.fused.io%2Fnotebook_login_redirect&code_challenge_method=S256&code_challenge=1uVlntkglPd87eZGDEmw4c2q2vAxVMi0ubAjEN7FfTQ"})}),"\n"]}),"\n",(0,a.jsx)(n.p,{children:"Once you have logged in, that page will give you a code which you can paste into this\nnotebook to finish logging in."}),"\n",(0,a.jsx)(n.p,{children:"\u261d\ufe0f Pro-tip: with VSCode, if cell outputs don't render as you might expect, you can\nconfigure the cell's output."}),"\n",(0,a.jsx)("img",{src:"https://fused-magic.s3.us-west-2.amazonaws.com/docs_assets/git_workflow_config_cell_output.png",width:"40%"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# You should paste here token from the URL above and run the cell\n# credentials.finalize(code="...")\n'})}),"\n",(0,a.jsx)(n.h2,{id:"2-define-input-parameters-to-customize-gif",children:"2. Define input parameters to customize gif"}),"\n",(0,a.jsx)(n.h3,{id:"21-set-datetime-range",children:"2.1 Set datetime range"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Set date & time\nEST = datetime.timezone(\n    datetime.timedelta(hours=-5)\n)  # Eastern Standard Time (EST) is UTC-5\nDEFAULT_DATETIME = datetime.datetime(2024, 2, 6, 12, 0, tzinfo=EST)\n\nselected_datetime = widgets.DatetimePicker(\n    description="Start Time", value=DEFAULT_DATETIME, disabled=False\n)\n\n# Set number of frames after start time (6 frames correspond to 1 hour)\nn_frames = widgets.IntText(\n    value=32, description="N Frames", min=1, max=720, step=1, disabled=False\n)\n\n# File name of generated gif\ngif_file_name = widgets.Text(\n    value="/tmp/animation.gif",\n    placeholder="/tmp/animation.gif",\n    description="Output file",\n    disabled=False,\n)\n\n# Display\nwidgets.VBox([selected_datetime, n_frames, gif_file_name])\n'})}),"\n",(0,a.jsx)(s.A,{children:"VBox(children=(DatetimePicker(value=datetime.datetime(2024, 2, 6, 12, 0, tzinfo=datetime.timezone(datetime.tim\u2026"}),"\n",(0,a.jsx)(n.h3,{id:"22-set-bounds-for-area-of-interest-aoi",children:"2.2 Set bounds for area of interest (AOI)"}),"\n",(0,a.jsxs)(n.p,{children:["The AOI should be defined in a 1-row GeoDataFrame with a single ",(0,a.jsx)(n.code,{children:"geometry"})," column."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Sample geometry and crs\nroi_wkt = \'{"type": "FeatureCollection", "features": [{"id": "0", "type": "Feature", "properties": {"location": "OR_ABI-L2-CMIPF-M6C09_G18_s20240290000212_e20240290009526_c20240290009593.nc_colored.tif"}, "geometry": {"type": "Polygon", "coordinates": [[[-4000000.0, 2500000.0], [3000000.0, 2500000.0], [3000000.0, -1500000.0], [-4000000.0, -1500000.0], [-4000000.0, 2500000.0]]]}}]}\'\ncrs = \'PROJCRS["WGS84 / Lambert_Conformal_Conic_2SP",BASEGEOGCRS["WGS84",DATUM["World Geodetic System 1984",ELLIPSOID["WGS 84",6378137,298.257223563,LENGTHUNIT["metre",1,ID["EPSG",9001]]]],PRIMEM["Greenwich",0,ANGLEUNIT["degree",0.0174532925199433]]],CONVERSION["unnamed",METHOD["Lambert Conic Conformal (2SP)",ID["EPSG",9802]],PARAMETER["Latitude of false origin",33,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8821]],PARAMETER["Longitude of false origin",-125,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8822]],PARAMETER["Latitude of 1st standard parallel",21,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8823]],PARAMETER["Latitude of 2nd standard parallel",45,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8824]],PARAMETER["Easting at false origin",0,LENGTHUNIT["Meter",1],ID["EPSG",8826]],PARAMETER["Northing at false origin",0,LENGTHUNIT["Meter",1],ID["EPSG",8827]]],CS[Cartesian,2],AXIS["easting",east,ORDER[1],LENGTHUNIT["Meter",1]],AXIS["northing",north,ORDER[2],LENGTHUNIT["Meter",1]]]\'\njson_data = json.loads(roi_wkt)\n\n# Input geodataframe\nroi = gpd.GeoDataFrame(\n    geometry=[\n        Polygon(feature["geometry"]["coordinates"][0])\n        for feature in json_data["features"]\n    ],\n    crs=crs,\n)\nroi\n'})}),"\n",(0,a.jsxs)(n.table,{children:[(0,a.jsx)(n.thead,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.th,{style:{textAlign:"right"}}),(0,a.jsx)(n.th,{style:{textAlign:"left"},children:"geometry"})]})}),(0,a.jsx)(n.tbody,{children:(0,a.jsxs)(n.tr,{children:[(0,a.jsx)(n.td,{style:{textAlign:"right"},children:"0"}),(0,a.jsx)(n.td,{style:{textAlign:"left"},children:"POLYGON ((-4000000.000 2500000.000, 3000000.00..."})]})})]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"roi.geometry.iloc[0]\n"})}),"\n",(0,a.jsx)(s.A,{children:"<POLYGON ((-4000000 2500000, 3000000 2500000, 3000000 -1500000, -4000000 -15...>"}),"\n",(0,a.jsx)(n.h2,{id:"3-generate-frames-from-band-8-of-the-goes-18-dataset",children:"3. Generate frames from band 8 of the GOES-18 dataset"}),"\n",(0,a.jsx)(n.p,{children:"The next cell declares and previews function to call the UDF that returns the data as an\narray."}),"\n",(0,a.jsx)(n.p,{children:"The subsequent cells create parallel calls, then stitch returned arrays to create the\ngif."}),"\n",(0,a.jsx)(n.h3,{id:"31-structure-parameters",children:"3.1 Structure parameters"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Set parameters to call the UDF\ndatestr: str = selected_datetime.value.strftime("%Y-%m-%d")\nstart_i: int = 0\nend_i: int = n_frames.value  # Number of frames at 10-minute intervals after start time\nband: int = 8  # Target band in the GOES-18 datasets\nproduct_name: str = "ABI-L2-CMIPF"  # Imagery product in NOAA\'s S3 bucket\n\n# Geometry in serializable representation\nroi_wkt = roi.geometry.buffer(-90001).to_json()\ncrs = str(roi.crs)\n'})}),"\n",(0,a.jsx)(n.h3,{id:"32-define-and-preview-functions-that-create-the-array-from-noaa-imagery-\ufe0f",children:"3.2 Define and preview functions that create the array from NOAA imagery \ud83d\udef0\ufe0f"}),"\n",(0,a.jsxs)(n.p,{children:["\ud83c\udf93 The ",(0,a.jsx)(n.code,{children:"call_udf"})," structures calls to the remote UDF with the convenient\n",(0,a.jsx)(n.code,{children:"fused.core.run_file"})," wrapper. The appendix shows how to view and modify the Python code\nbehind that UDF."]}),"\n",(0,a.jsx)(n.h4,{id:"321-udf-to-determine-how-to-subsample-array",children:"3.2.1 UDF to determine how to subsample array"}),"\n",(0,a.jsxs)(n.p,{children:["The first UDF call, to the UDF named ",(0,a.jsx)(n.code,{children:"GOES_18_Partitions"}),", generates array coordinates\nto subsample NOAA image to the size of the original geometry."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'df = fused.core.run_file("sina@fused.io", "GOES_18_Partitions")\npartition_str = df.to_json()\npartition_str\n'})}),"\n",(0,a.jsx)(s.A,{children:'\'{"x_start":{"0":1190,"1":2380,"2":3570,"3":1190,"4":2380,"5":3570},"x_stop":{"0":2390,"1":3580,"2":4770,"3":2390,"4":3580,"5":4770},"y_start":{"0":0,"1":0,"2":0,"3":1190,"4":1190,"5":1190},"y_stop":{"0":1200,"1":1200,"2":1200,"3":2390,"4":2390,"5":2390},"fused_index":{"0":0,"1":1,"2":2,"3":3,"4":4,"5":5}}\''}),"\n",(0,a.jsx)(n.h4,{id:"322-udf-to-subsample-array",children:"3.2.2 UDF to subsample array"}),"\n",(0,a.jsxs)(n.p,{children:["The second UDF call, to the UDF named ",(0,a.jsx)(n.code,{children:"GOES_18_Async"}),", subsamples the array and returns\nan array that corresponds to different frames for the gif to generate. It's wrapped in\nthe ",(0,a.jsx)(n.code,{children:"call_udf"})," function to make it easy to run in a loop."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def call_udf(\n    start_end_i: List[int] = [0, 32],\n    band: int = 8,\n    datestr: str = datestr,\n    product_name: str = "ABI-L2-CMIPF",\n    roi_wkt: str = \'{"type": "FeatureCollection", "features": [{"id": "0", "type": "Feature", "properties": {}, "geometry": {"type": "Polygon", "coordinates": [[[-4000000.0, 2500000.0], [3000000.0, 2500000.0], [3000000.0, -1500000.0], [-4000000.0, -1500000.0], [-4000000.0, 2500000.0]]]}}]}\',\n    crs: str = \'PROJCRS["WGS84 / Lambert_Conformal_Conic_2SP",BASEGEOGCRS["WGS84",DATUM["World Geodetic System 1984",ELLIPSOID["WGS 84",6378137,298.257223563,LENGTHUNIT["metre",1,ID["EPSG",9001]]]],PRIMEM["Greenwich",0,ANGLEUNIT["degree",0.0174532925199433]]],CONVERSION["unnamed",METHOD["Lambert Conic Conformal (2SP)",ID["EPSG",9802]],PARAMETER["Latitude of false origin",33,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8821]],PARAMETER["Longitude of false origin",-125,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8822]],PARAMETER["Latitude of 1st standard parallel",21,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8823]],PARAMETER["Latitude of 2nd standard parallel",45,ANGLEUNIT["degree",0.0174532925199433],ID["EPSG",8824]],PARAMETER["Easting at false origin",0,LENGTHUNIT["Meter",1],ID["EPSG",8826]],PARAMETER["Northing at false origin",0,LENGTHUNIT["Meter",1],ID["EPSG",8827]]],CS[Cartesian,2],AXIS["easting",east,ORDER[1],LENGTHUNIT["Meter",1]],AXIS["northing",north,ORDER[2],LENGTHUNIT["Meter",1]]]\',\n    partition_str: str = \'{"x_start":{"0":1190,"1":2380,"2":3570,"3":1190,"4":2380,"5":3570},"x_stop":{"0":2390,"1":3580,"2":4770,"3":2390,"4":3580,"5":4770},"y_start":{"0":0,"1":0,"2":0,"3":1190,"4":1190,"5":1190},"y_stop":{"0":1200,"1":1200,"2":1200,"3":2390,"4":2390,"5":2390},"fused_index":{"0":0,"1":1,"2":2,"3":3,"4":4,"5":5}}\',\n) -> List[Any]:\n    """\n    Executes a remote user-defined function (UDF) to process satellite imagery data based on the given parameters.\n\n    Args:\n        start_end_i (int): The start & end indices for the imagery frames to process.\n        band (int, optional): The satellite imagery band to process. Defaults to 8.\n        datestr (str): The date string representing the target date for the satellite imagery data.\n        product_name (str, optional): The name of the satellite imagery product. Defaults to "ABI-L2-CMIPF".\n        roi_wkt (str, optional): A string representing the region of interest (ROI) in Well-Known Text (WKT) format for GeoJSON.\n        crs (str, optional): The Coordinate Reference System (CRS) for the ROI.\n        partition_str (str, optional): A string representing partition information for processing.\n\n    Returns:\n        List[Any]: A flattened list representing the processed image frames.\n\n    This function calls a remote UDF, passing parameters for the date, index range, band, and imagery product name,\n    and returns a list containing processed satellite imagery data.\n    """\n    start_i = start_end_i[0]\n    end_i = start_end_i[1]\n    df = fused.core.run_file(\n        "sina@fused.io",  # This public UDF is published under Sina\'s account and available to all users\n        "GOES_18_Async",  # Name of UDF\n        datestr=datestr,\n        start_i=start_i,\n        end_i=end_i,\n        band=band,\n        product_name=product_name,\n        roi_wkt=roi_wkt,\n        crs=crs,\n        partition_str=partition_str,\n    )\n    arr = df["arr"].apply(lambda x: x.reshape(df["shape"][0]))[0]\n    return arr\n\n\n# Call the UDF to preview its output array\narr = call_udf([start_i, end_i])\n\n# Display the array shape and preview the first and last frames\nprint(\n    f"The array shape is {arr.shape} which represents {end_i-start_i} frames of m x n pixels each."\n)\n\ni = 1  # Number of frames to preview from start and end of array\nprint("Array:\\n", np.concatenate([arr[:i], arr[-i:]], axis=0))\n'})}),"\n",(0,a.jsx)(s.A,{children:"The array shape is (32, 998, 1748) which represents 32 frames of m x n pixels each.\nArray:\n [[[147 148 149 ... 116 116 116]\n  [148 149 149 ... 116 116 116]\n  [148 148 150 ... 116 116 116]\n  ...\n  [222 223 223 ... 246 245 246]\n  [223 223 224 ... 246 246 246]\n  [224 224 224 ... 246 246 246]]\n [[123 124 124 ...  84  83  84]\n  [122 124 123 ...  85  85  85]\n  [118 122 121 ...  86  86  87]\n  ...\n  [204 213 213 ... 250 250 249]\n  [213 212 212 ... 250 250 249]\n  [211 209 210 ... 250 250 250]]]"}),"\n",(0,a.jsx)(n.h3,{id:"33-now-run-in-parallel-",children:"3.3 Now run in parallel \u26a1"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def run_async(fn, arr_args):\n    """\n    Runs an asynchronous function concurrently for each set of arguments in a list.\n\n    This function takes an asynchronous function `fn` and a list of arguments `arr_args`.\n    Each set of arguments in `arr_args` is passed to `fn`, and all the calls are executed concurrently.\n    It uses `asyncio.to_thread` to run the asynchronous tasks in separate threads, allowing for\n    concurrent execution even if the tasks are CPU-bound.\n\n    Parameters:\n    - fn (Callable[[Any], Coroutine[Any, Any, Any]]): An asynchronous function to be executed concurrently.\n      The function should accept a single argument and return a coroutine.\n    - arr_args (List[Any]): A list of arguments to be passed to `fn`. Each element in the list is a set of\n      arguments for a single execution of `fn`.\n\n    Returns:\n    - List[Any]: A list of results from the concurrent execution of `fn` with each set of arguments from `arr_args`.\n\n    Note:\n    This function applies `nest_asyncio.apply()` to allow the event loop to be nested. This is useful for\n    running asyncio applications in environments where an event loop is already running, such as Jupyter notebooks.\n    """\n    import asyncio\n\n    import nest_asyncio\n\n    nest_asyncio.apply()\n    a = []\n    for i in arr_args:\n        a.append(asyncio.to_thread(fn, i))\n\n    async def main():\n        return await asyncio.gather(*a)\n\n    return asyncio.run(main())\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Break-up the input arguments into individual chunks\nBLOCK_SIZE = 12  # Number of frames to process in each call to the UDF\nL = np.arange(start_i, end_i, BLOCK_SIZE)\narg_list = [[i, i + BLOCK_SIZE] for i in L[:-1]] + [(L[-1], end_i)]\narg_list\n"})}),"\n",(0,a.jsx)(s.A,{children:"[[0, 12], [12, 24], (24, 32)]"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Call the UDF for each chunk of input arguments\nframes = run_async(call_udf, arg_list)\n\n# Stack frames \ud83e\udd5e\nframes_raw = np.vstack(frames)\n"})}),"\n",(0,a.jsx)(n.h2,{id:"4-stitch-gif",children:"4. Stitch gif"}),"\n",(0,a.jsxs)(n.p,{children:["The cell above made an array of ",(0,a.jsx)(n.code,{children:"k"})," x ",(0,a.jsx)(n.code,{children:"m"})," x ",(0,a.jsx)(n.code,{children:"n"})," dimensions, where ",(0,a.jsx)(n.code,{children:"k"})," is the number of\nframes, and ",(0,a.jsx)(n.code,{children:"m"})," & ",(0,a.jsx)(n.code,{children:"n"})," are the vertical and horizontal dimensions of the image. The next\nstep stitches these together to create a gif."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'def to_gif(\n    frames: List[np.ndarray], file_name: str, duration: int = 150, loop: int = 1000\n) -> str:\n    """\n    Converts a list of image frames into a GIF and returns a base64-encoded data URL of the GIF.\n\n    This function processes each frame to clip and stretch its pixel values to the 0-255 range,\n    compiles these frames into a GIF file saved to the specified file name, and then encodes the\n    file\'s contents into a base64 data URL.\n\n    Parameters:\n    - frames (List[np.ndarray]): A list of image frames, where each frame is represented as a NumPy\n      array of pixel values.\n    - file_name (str): The name of the file where the GIF should be saved.\n    - duration (int, optional): The duration (in milliseconds) of each frame in the GIF. Default is 150ms.\n    - loop (int, optional): The number of times the GIF should loop. Default is 1000, where 0 means\n      an infinite loop.\n\n    """\n\n    def _func(frame: np.ndarray) -> np.ndarray:\n        min_val = 0\n        max_val = 255\n        arr = np.array(frame)\n        arr_clipped = np.clip(arr, min_val, max_val)\n        arr_stretched = ((arr_clipped - min_val) / (max_val - min_val) * 255).astype(\n            "uint8"\n        )\n        return arr_stretched\n\n    frames = [_func(arr) for arr in frames]\n    imageio.mimsave(file_name, frames, format="GIF", duration=duration, loop=loop)\n\n    with open(file_name, "rb") as file_:\n        contents = file_.read()\n        data_url = base64.b64encode(contents).decode("utf-8")\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# Configure output gif\ngif_duration = 20  # Between 20 and 100 seconds\ncoarsen = 1  # Between 1 and 5. Reduces file size, take every second pixel in the x & y directions.\ngif_slice = slice(0, 1000, 1)\n\n# Structure gif\nframes_gif = [i[::coarsen, ::coarsen] for i in frames_raw]\n_ = to_gif(frames_gif[gif_slice], gif_file_name.value, duration=gif_duration)\n\n# Display gif\ndisplay(Image(filename=gif_file_name.value))\n"})}),"\n",(0,a.jsx)("img",{src:"https://fused-magic.s3.us-west-2.amazonaws.com/docs_assets/gifs/animation.gif",width:"40%"}),"\n",(0,a.jsx)(n.h1,{id:"appendix-i-view-and-modify-udf-code",children:"Appendix I: View and modify UDF code"}),"\n",(0,a.jsxs)(n.p,{children:["The 2 UDFs above are published under Sina's account. You can load them into your\nnotebook with ",(0,a.jsx)(n.code,{children:"get_udfs"})," then show code with ",(0,a.jsx)(n.code,{children:"render"}),"."]}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'# Note: may require text/html "presentation" on VSCODE to show repr\nmy_udf_goes_18_partitions = fused.get_udfs(whose="public")["GOES_18_Partitions"]\nmy_udf_goes_18_partitions\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:'my_udf_goes_18_async = fused.get_udfs(whose="public")["GOES_18_Async"]\nmy_udf_goes_18_async\n'})}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"# (Optionally) Render the UDF's code in a new notebook cell\n# my_udf_goes_18_partitions.render()\n"})})]})}function f(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(u,{...e})}):u(e)}},1023:(e,n,t)=>{t.d(n,{A:()=>f});t(6540);var a,r=new Uint8Array(16);function i(){if(!a&&!(a="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return a(r)}const s=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;const o=function(e){return"string"==typeof e&&s.test(e)};for(var d=[],l=0;l<256;++l)d.push((l+256).toString(16).substr(1));const c=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=(d[e[n+0]]+d[e[n+1]]+d[e[n+2]]+d[e[n+3]]+"-"+d[e[n+4]]+d[e[n+5]]+"-"+d[e[n+6]]+d[e[n+7]]+"-"+d[e[n+8]]+d[e[n+9]]+"-"+d[e[n+10]]+d[e[n+11]]+d[e[n+12]]+d[e[n+13]]+d[e[n+14]]+d[e[n+15]]).toLowerCase();if(!o(t))throw TypeError("Stringified UUID is invalid");return t};const h=function(e,n,t){var a=(e=e||{}).random||(e.rng||i)();if(a[6]=15&a[6]|64,a[8]=63&a[8]|128,n){t=t||0;for(var r=0;r<16;++r)n[t+r]=a[r];return n}return c(a)};var u=t(4848);const f=e=>(0,u.jsxs)("div",{style:{backgroundColor:"var(--ifm-background-surface-color)",marginBottom:"var(--ifm-leading)",borderRadius:"var(--ifm-global-radius)",boxShadow:"var(--ifm-global-shadow-lw)",overflow:"hidden",padding:"10px",font:"var(--ifm-code-font-size) / var(--ifm-pre-line-height) var(--ifm-font-family-monospace)"},children:[(0,u.jsx)("span",{style:{color:"var(--ifm-color-primary)"},children:"Out: "}),(0,u.jsx)("pre",{style:{margin:"0px",backgroundColor:"inherit"},children:e.children.split("\n").map((e=>(0,u.jsx)("p",{style:{marginBottom:"0px"},children:e},h())))})]})},8987:(e,n,t)=>{t.d(n,{A:()=>i});t(6540);var a=t(8774),r=t(4848);const i=e=>{let{githubUrl:n,colabUrl:t}=e;return(0,r.jsxs)("div",{className:"link-buttons",style:{textAlign:"right"},children:[(0,r.jsx)("br",{}),(0,r.jsx)(a.A,{to:t,children:(0,r.jsx)("img",{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open in Colab"})})," ",(0,r.jsx)(a.A,{to:n,children:(0,r.jsx)("img",{src:"https://badgen.net/static/GitHub/Open/blue?icon=github",alt:"Open in GitHub"})})]})}},290:(e,n,t)=>{t(6540);var a=t(3259),r=t.n(a),i=(t(2303),t(4848));r()({loader:()=>t.e(1236).then(t.bind(t,1236)),loading:e=>{let{timedOut:n}=e;return n?(0,i.jsx)("blockquote",{children:"Error: Loading Plotly timed out."}):(0,i.jsx)("div",{children:"loading..."})},timeout:1e4})},8453:(e,n,t)=>{t.d(n,{R:()=>s,x:()=>o});var a=t(6540);const r={},i=a.createContext(r);function s(e){const n=a.useContext(i);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:s(e.components),a.createElement(i.Provider,{value:n},e.children)}}}]);