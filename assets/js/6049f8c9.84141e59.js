"use strict";(self.webpackChunkfused_docs=self.webpackChunkfused_docs||[]).push([[426],{8038:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>u,frontMatter:()=>n,metadata:()=>r,toc:()=>d});var s=a(4848),i=a(8453);const n={slug:"on-udfs",title:"3 key aspects of UDFs.",authors:["sina"],tags:["udfs"]},o=void 0,r={permalink:"/blog/on-udfs",source:"@site/blog/2024-07-30-udfs/index.mdx",title:"3 key aspects of UDFs.",description:"Fused User Defined Functions (UDFs) are powerful abstractions that modularize key operations that power geospatial applications. Here are three key aspects of Fused UDFs that make them particularly effective:",date:"2024-07-30T00:00:00.000Z",formattedDate:"July 30, 2024",tags:[{label:"udfs",permalink:"/blog/tags/udfs"}],readingTime:.9233333333333333,hasTruncateMarker:!1,authors:[{name:"Sina Kashuk",title:"CEO",url:"https://github.com/kashuk",imageURL:"https://github.com/kashuk.png",key:"sina"}],frontMatter:{slug:"on-udfs",title:"3 key aspects of UDFs.",authors:["sina"],tags:["udfs"]},unlisted:!1,nextItem:{title:"Fused Code to Map. Instantly.",permalink:"/blog/code-to-map"}},l={authorsImageUrls:[void 0]},d=[{value:"Caching: Virtual Datasets",id:"caching-virtual-datasets",level:2},{value:"Chaining: Composable Operations",id:"chaining-composable-operations",level:2},{value:"Delivery: Flexible Output",id:"delivery-flexible-output",level:2}];function c(e){const t={h2:"h2",li:"li",p:"p",ul:"ul",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.p,{children:"Fused User Defined Functions (UDFs) are powerful abstractions that modularize key operations that power geospatial applications. Here are three key aspects of Fused UDFs that make them particularly effective:"}),"\n",(0,s.jsx)(t.h2,{id:"caching-virtual-datasets",children:"Caching: Virtual Datasets"}),"\n",(0,s.jsx)(t.p,{children:'Fused data UDFs create virtual datasets, similar to database views, without materializing entire datasets. This approach is especially valuable when working with large-scale geospatial data. Instead of loading data to memory, which would require a big machine, UDFs define a set of operations to be performed on a fraction of a spatially filtered dataset. This "lazy evaluation" strategy conserves resources and allows for more flexible data handling - and has a natural synergy with cloud-optimized datasets and serverless compute architectures.'}),"\n",(0,s.jsx)(t.h2,{id:"chaining-composable-operations",children:"Chaining: Composable Operations"}),"\n",(0,s.jsx)(t.p,{children:"Modularization promotes chaining data processing steps to create complex workflows from simpler building blocks. This enables users to create powerful, reusable analysis pipelines that process data on-demand, and call them from a simple HTTP endpoint with a single line of code."}),"\n",(0,s.jsx)(t.h2,{id:"delivery-flexible-output",children:"Delivery: Flexible Output"}),"\n",(0,s.jsx)(t.p,{children:"Fused UDFs also excel in data delivery, offering various ways to export and share results. This flexibility is crucial to integrate Fused workflows into broader data ecosystems and applications.\nUDFs can be configured to:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Return data in common file formats for raster and vector table data (COGs, Parquet, GeoJSON, etc.)"}),"\n",(0,s.jsx)(t.li,{children:"Generate visualizations (maps, charts, etc.)"}),"\n",(0,s.jsx)(t.li,{children:"Read and write data to cloud storage systems"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"By leveraging these three aspects - caching through virtual datasets, chaining of operations, and flexible delivery options - Fused UDFs provide a powerful framework to build scalable, efficient, and adaptable geospatial data processing systems. They enable teams to work with any size datasets without the need for extensive infrastructure."})]})}function u(e={}){const{wrapper:t}={...(0,i.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>r});var s=a(6540);const i={},n=s.createContext(i);function o(e){const t=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:o(e.components),s.createElement(n.Provider,{value:t},e.children)}}}]);