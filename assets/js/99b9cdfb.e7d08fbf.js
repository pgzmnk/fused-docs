"use strict";(self.webpackChunkfused_docs=self.webpackChunkfused_docs||[]).push([[6451],{8896:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>h,contentTitle:()=>d,default:()=>x,frontMatter:()=>l,metadata:()=>c,toc:()=>u});var s=n(4848),a=n(8453);const i=n.p+"assets/images/filetile6-077f637a544bf28c01260eb7c6a7681e.png",r=n.p+"assets/images/image-file2-e3c12184c845c2cf020effb0d2c3ced6.png",o=n.p+"assets/images/image-tile2-d7330274eb7dab32487d46d1d6d85363.png",l={id:"core-concepts",title:"Core Concepts",tags:["Core Concepts"],sidebar_position:2,toc_min_heading_level:2,toc_max_heading_level:4},d="Core concepts",c={id:"basics/core-concepts",title:"Core Concepts",description:"Fused lets teams run Python in the cloud without having to think about infrastructure. It's the glue layer between your most important data and the applications that consume the data.",source:"@site/docs/basics/core_concepts.mdx",sourceDirName:"basics",slug:"/basics/core-concepts",permalink:"/basics/core-concepts",draft:!1,unlisted:!1,tags:[{label:"Core Concepts",permalink:"/tags/core-concepts"}],version:"current",sidebarPosition:2,frontMatter:{id:"core-concepts",title:"Core Concepts",tags:["Core Concepts"],sidebar_position:2,toc_min_heading_level:2,toc_max_heading_level:4},sidebar:"tutorialSidebar",previous:{title:"Quickstart",permalink:"/basics/quickstart/"},next:{title:"Get data in",permalink:"/basics/in"}},h={},u=[{value:"How does it work?",id:"how-does-it-work",level:2},{value:"The UDF",id:"the-udf",level:2},{value:"a) <code>@fused.udf</code> decorator",id:"a-fusedudf-decorator",level:3},{value:"b) Function declaration",id:"b-function-declaration",level:3},{value:"c) UDF parameters",id:"c-udf-parameters",level:3},{value:"Explicit Typing",id:"explicit-typing",level:4},{value:"d) Return object",id:"d-return-object",level:3},{value:"Vector",id:"vector",level:4},{value:"Raster",id:"raster",level:4},{value:"Execution modes",id:"execution-modes",level:2},{value:"File &amp; Tile",id:"file--tile",level:4},{value:"File",id:"file",level:5},{value:"Tile",id:"tile",level:5},{value:"The <code>bbox</code> object",id:"the-bbox-object",level:4},{value:"<code>fused.types.TileGDF</code>",id:"fusedtypestilegdf",level:5},{value:"<code>fused.types.Bbox</code>",id:"fusedtypesbbox",level:5},{value:"<code>fused.types.TileXYZ</code>",id:"fusedtypestilexyz",level:5},{value:"Examples of using the bbox object",id:"examples-of-using-the-bbox-object",level:5},{value:"a) Spatially filter raster files",id:"a-spatially-filter-raster-files",level:6},{value:"Spatially filter STAC datasets",id:"spatially-filter-stac-datasets",level:6},{value:"Call a UDF endpoint",id:"call-a-udf-endpoint",level:3},{value:"File",id:"file-1",level:4},{value:"Tile",id:"tile-1",level:4}];function p(e){const t={a:"a",admonition:"admonition",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",h4:"h4",h5:"h5",h6:"h6",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"core-concepts",children:"Core concepts"}),"\n",(0,s.jsx)(t.p,{children:"Fused lets teams run Python in the cloud without having to think about infrastructure. It's the glue layer between your most important data and the applications that consume the data."}),"\n",(0,s.jsx)(t.p,{children:"If you're looking to simplify your life with serverless cloud, these pages will help you understand the patterns and best practices to work with Fused."}),"\n",(0,s.jsx)(t.h2,{id:"how-does-it-work",children:"How does it work?"}),"\n",(0,s.jsx)(t.p,{children:"Fused takes your Python code and runs it in the cloud. Fused lets any of your tools run your code and load its output so you can easily move data across your different apps. This enables you to dramatically simplify your architecture and easily create integrations."}),"\n",(0,s.jsx)(t.h2,{id:"the-udf",children:"The UDF"}),"\n",(0,s.jsx)(t.p,{children:"User Defined Functions (UDFs) are the core building blocks of Fused. They contain the Python code you want to run. As this diagram shows, the UDF code defines interactions with datasets and data platforms using standard Python libraries. Fused automagically creates a Hosted API endpoint for each of your UDFs. When an app calls the endpoint, Fused runs the UDF code on a serverless machine and returns the function output."}),"\n",(0,s.jsx)(t.p,{children:"As a glue layer, UDFs integrate with your most important apps and can call each other (sequentially and in parallel) to assemble into complex workflows."}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.img,{src:"https://fused-magic.s3.us-west-2.amazonaws.com/docs_assets/ecosystem_diagram.png",alt:"alt text"})}),"\n",(0,s.jsxs)(t.p,{children:["You can create and run UDFs on the Fused ",(0,s.jsx)(t.a,{href:"/workbench/",children:"Workbench"})," browser IDE or in any Python environment using the ",(0,s.jsx)(t.a,{href:"/python-sdk/",children:"Fused Python SDK"}),". When you save a UDF in Fused, you automatically get an endpoint for it which can be called by any tool that can make an HTTP request."]}),"\n",(0,s.jsx)(t.p,{children:"To write a UDF, its important to understand its anatomy. A UDF is a Python function with the following components, which the following sections describe at depth."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsxs)(t.a,{href:"/basics/core-concepts/#a-fusedudf-decorator",children:["a) ",(0,s.jsx)(t.code,{children:"@fused.udf"})," decorator"]})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/basics/core-concepts/#b-function-declaration",children:"b) Function declaration"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/basics/core-concepts/#c-udf-parameters",children:"c) UDF parameters"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.a,{href:"/basics/core-concepts/#d-return-object",children:"d) Return object"})}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'@fused.udf # a) Fused decorator\ndef udf( # b) Function declaration\n    bbox: fused.types.Bbox = None, # c) UDF parameters\n    table_path: str = "", \n    n: int=10\n):\n    from utils import table_to_tile\n\n    gdf=table_to_tile(bbox, table=table_path)\n    return gdf # d) Return object\n'})}),"\n",(0,s.jsxs)(t.h3,{id:"a-fusedudf-decorator",children:["a) ",(0,s.jsx)(t.code,{children:"@fused.udf"})," decorator"]}),"\n",(0,s.jsxs)(t.p,{children:["To create a UDF, decorate a Python function with ",(0,s.jsx)(t.code,{children:"@fused.udf"}),". This decorator supercharges the function with the ability to run its code in a serverless cloud environment that automatically provisions and scales compute resources."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"# highlight-next-line\n@fused.udf # a) Fused decorator\ndef udf():\n    ...\n    return gdf \n"})}),"\n",(0,s.jsx)(t.h3,{id:"b-function-declaration",children:"b) Function declaration"}),"\n",(0,s.jsx)(t.p,{children:"The next step is to structure the function's business logic to interact with upstream data sources and return an object which will be the UDF's output."}),"\n",(0,s.jsxs)(t.p,{children:["To illustrate, this UDF is a function called ",(0,s.jsx)(t.code,{children:"udf"})," that returns a dataframe. Notice how import statements must be placed within the function declaration so they go wherever the function goes."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'@fused.udf\n# highlight-start\ndef udf( # b) Function declaration\n    bbox: fused.types.Bbox = None,\n    table_path: str = "", \n    n: int=10\n):\n    from utils import table_to_tile\n\n    gdf=table_to_tile(bbox, table=table_path)\n    return gdf\n# highlight-end\n'})}),"\n",(0,s.jsx)(t.h3,{id:"c-udf-parameters",children:"c) UDF parameters"}),"\n",(0,s.jsx)(t.p,{children:"When you call a UDF, you can choose to pass data to its parameters. This enables UDFs to dynamically run code based on its input parameters."}),"\n",(0,s.jsx)(t.h4,{id:"explicit-typing",children:"Explicit Typing"}),"\n",(0,s.jsx)(t.p,{children:"Fused resolves arguments to their specified types."}),"\n",(0,s.jsxs)(t.p,{children:["This is helpful when UDF endpoints are called via HTTP requests that specify argument values via ",(0,s.jsx)(t.a,{href:"https://www.branch.io/glossary/query-parameters/",children:"query parameters"}),", which require input parameters to be serializable."]}),"\n",(0,s.jsx)(t.p,{children:"For example, take a function like this one, with typed parameters."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'@fused.udf\n\ndef udf(\n    # highlight-start\n    bbox: fused.types.Bbox = None, # c) UDF parameters\n    table_path: str = "", \n    n: int=10\n    # highlight-end\n):\n    from utils import table_to_tile\n\n    gdf=table_to_tile(bbox, table=table_path)\n    return gdf\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The ",(0,s.jsx)(t.code,{children:"bbox"})," argument gives the UDF spatial awareness and users can decide its structure, for convenience - which you can read more about ",(0,s.jsx)(t.a,{href:"/basics/core-concepts/#the-bbox-object",children:"here"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["When its endpoint is called like so, Fused injects a ",(0,s.jsx)(t.code,{children:"bbox"})," parameter corresponding to a Tile with the ",(0,s.jsx)(t.code,{children:"1,1,1"})," index, resolve ",(0,s.jsx)(t.code,{children:"table_path"})," value as a string and the ",(0,s.jsx)(t.code,{children:"n"})," value as an integer."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:'curl -XGET "https://app.fused.io/server/v1/realtime-shared/$SHARED_TOKEN/run/tiles/1/1/1?table_path=table.shp&n=4"\n'})}),"\n",(0,s.jsx)(t.h3,{id:"d-return-object",children:"d) Return object"}),"\n",(0,s.jsx)(t.p,{children:"Like with a regular Python function, the UDF return statement makes a UDF function exit and hand back the return object to its caller."}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"@fused.udf\ndef udf():\n    ...\n    # highlight-start\n    return gdf # d) Return object\n    # highlight-end\n"})}),"\n",(0,s.jsx)(t.p,{children:"When writing a UDF, the data type and CRS of its returned object determines how it\u2019ll appear on the map. To work with standard file and map services, Fused expects UDFs to return data in either raster or tabular vector formats."}),"\n",(0,s.jsx)(t.h4,{id:"vector",children:"Vector"}),"\n",(0,s.jsx)(t.p,{children:"Vectors represent real-world features with points, lines, and polygons. Fused accepts the following Vector return types:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"gpd.GeoDataFrame"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"pd.DataFrame"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"gpd.GeoSeries"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"pd.Series"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"shapely geometry"})}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["Fused expects all spatial data in ",(0,s.jsx)(t.code,{children:"EPSG:4326"})," - ",(0,s.jsx)(t.code,{children:"WGS84"})," coordinates, using Latitude-Longitude units in decimal degrees. If the CRS of the returned object is not in ",(0,s.jsx)(t.code,{children:"EPSG:4326"})," CRS, Fused will make a best effort to convert it - so it's preferable that UDFs are written to return a data in the ",(0,s.jsx)(t.code,{children:"EPSG:4326"})," CRS."]}),"\n",(0,s.jsx)(t.h4,{id:"raster",children:"Raster"}),"\n",(0,s.jsx)(t.p,{children:"Raster data is comprised of pixels with values, typically arranged in a grid. Rasters can have one or multiple layers."}),"\n",(0,s.jsx)(t.p,{children:"Fused accepts the following Raster return types"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"numpy.ndarray"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"xarray.DataArray"})}),"\n",(0,s.jsx)(t.li,{children:(0,s.jsx)(t.code,{children:"datashader.transfer_functions.Image"})}),"\n",(0,s.jsxs)(t.li,{children:[(0,s.jsx)(t.code,{children:"io.BytesIO"})," (including png images)"]}),"\n"]}),"\n",(0,s.jsxs)(t.p,{children:["The returned raster object must have a geospatial component. This tells Fused where on the map to render it as an image. For example, this UDF returns an ",(0,s.jsx)(t.code,{children:"xarray"})," ",(0,s.jsx)(t.code,{children:"DataArray"}),", which inherently contains coordinates that tell Fused where on the map to place it. Verify this by printing the object and its type."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"import fused\n@fused.udf\ndef udf(lat=-10, lng=30, dataset='general', version='1.5.4'):\n    import rioxarray\n\n    lat2= int(lat//10)*10\n    lng2 = int(lng//10)*10\n    cog_url = f\"s3://dataforgood-fb-data/hrsl-cogs/hrsl_{dataset}/v1.5/cog_globallat_{lat2}_lon_{lng2}_{dataset}-v{version}.tif\"\n\n    rds = rioxarray.open_rasterio(\n        cog_url,\n        masked=True,\n        overview_level=4\n    )\n \n    # Show the output type\n    print(type(rds))\n\n    # Inspect the output object\n    print(rds)\n\n    return rds\n"})}),"\n",(0,s.jsxs)(t.p,{children:["The print statements above should display the following in the stdout box, which shows how the layer value and coordinates of the ",(0,s.jsx)(t.code,{children:"DataArray"})," object."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-text",children:"<class 'xarray.core.dataarray.DataArray'>\n<xarray.DataArray (band: 1, y: 1126, x: 1126)>\n[1267876 values with dtype=float64]\nCoordinates:\n  * band         (band) int64 1\n  * x            (x) float64 30.0 30.01 30.02 30.03 ... 39.97 39.98 39.99 40.0\n  * y            (y) float64 -0.0001389 -0.009028 -0.01792 ... -9.991 -10.0\n    spatial_ref  int64 0\nAttributes:\n    AREA_OR_POINT:  Area\n    scale_factor:   1.0\n    add_offset:     0.0\n"})}),"\n",(0,s.jsxs)(t.blockquote,{children:["\n",(0,s.jsx)(t.p,{children:"\ud83d\udca1 There's 2 ways to control the transparency of raster images."}),"\n"]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"In RGB images, the color black (0,0,0) is automatically set to full transparency."}),"\n",(0,s.jsx)(t.li,{children:"If a 4 channel array is passed, i.e. RGBA, the value of the 4th channel is the transparency."}),"\n"]}),"\n",(0,s.jsxs)(t.admonition,{type:"tip",children:[(0,s.jsxs)(t.p,{children:["When returning a raster object that doesn\u2019t have spatial metadata, like a numpy array, the UDF must return the object's ",(0,s.jsx)(t.em,{children:"bounds"})," to tell Fused where to place it on the map. For example:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"@fused.udf\ndef udf(bbox: fused.types.Bbox=None):\n    ...\n    return np.array([[\u2026], [\u2026]]), bbox\n"})}),(0,s.jsxs)(t.p,{children:["If you forget to pass the bounds, Fused will default its bounds to ",(0,s.jsx)(t.code,{children:"(-180, -90, 180, 90)"})," and the output image will expand to the size of the globe."]})]}),"\n",(0,s.jsx)(t.h2,{id:"execution-modes",children:"Execution modes"}),"\n",(0,s.jsxs)(t.p,{children:["Fused automatically creates an endpoint for all saved Fused UDFs. When a client application calls a UDF endpoint, Fused runs a lightweight serverless Python operation and returns the function output. A call to a Fused UDF endpoint can return data as if it were a single remote ",(0,s.jsx)(t.code,{children:"File"}),". The same endpoint can be called dynamically, as ",(0,s.jsx)(t.code,{children:"Tile"}),", so it interoperates with map tiling systems."]}),"\n",(0,s.jsx)(t.h4,{id:"file--tile",children:"File & Tile"}),"\n",(0,s.jsxs)(t.p,{children:["To understand how a Fused UDF can be configured to execute, it's important to first understand the difference between ",(0,s.jsx)(t.code,{children:"File"})," and ",(0,s.jsx)(t.code,{children:"Tile"})," data."]}),"\n",(0,s.jsx)(t.p,{children:"Consider this diagram. When loaded as a remote File, every coordinate of the complex polygon would be included in one single file. In a Tiled format, there are predefined tile sets (grids) and the geometry is split into one or more Files, where each File represents one cell of the grid."}),"\n","\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)("img",{src:i,alt:"File",style:{width:400}})}),"\n",(0,s.jsxs)(t.p,{children:["Loading or rendering an entire dataset is an expensive operation in part because of the data volume that must transfer across the network. Fused UDFs can be designed to automatically split and output a dataset across several ",(0,s.jsx)(t.code,{children:"Tiles"})," - and speed up computation by operating on each part of the dataset in parallel."]}),"\n",(0,s.jsx)(t.h5,{id:"file",children:"File"}),"\n",(0,s.jsxs)(t.p,{children:["When an endpoint is called as a ",(0,s.jsx)(t.code,{children:"File"}),", the UDF runs only once and returns all output data in a single batch. This behaves like the access pattern for a remote file URL."]}),"\n","\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)("img",{src:r,alt:"File",style:{width:600}})}),"\n",(0,s.jsx)(t.h5,{id:"tile",children:"Tile"}),"\n",(0,s.jsxs)(t.p,{children:["When and endpoint is called as a ",(0,s.jsx)(t.code,{children:"Tile"}),", the endpoint becomes interoperable with map tiling clients. The endpoint is called as a ",(0,s.jsx)(t.code,{children:"File"})," for every ",(0,s.jsx)(t.code,{children:"Tile"})," requested, and Fused dynamically passes a ",(0,s.jsx)(t.code,{children:"bbox"})," object to each UDF call corresponding to the index of each tile on the map."]}),"\n","\n","\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)("img",{src:o,alt:"File",style:{width:600}})}),"\n",(0,s.jsxs)(t.h4,{id:"the-bbox-object",children:["The ",(0,s.jsx)(t.code,{children:"bbox"})," object"]}),"\n",(0,s.jsxs)(t.p,{children:["A UDF can strategically leverage ",(0,s.jsx)(t.a,{href:"https://guide.cloudnativegeo.org/",children:"cloud-optimized data formats"})," and effeciently load only a fraction of a dataset. A UDF becomes spatially aware when it leverages the ",(0,s.jsx)(t.code,{children:"bbox"})," parameter to spatially filter the datasets it operates on. This way, Fused distributes execution across multiple workers that scale and wind down as needed. Tile-level spatial filtering supercharges UDFs to process only specific parts of a dataset - based on specified geographic or logical partitions."]}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["The growing popularity of cloud optimized data formats is revolutionizing data processing by eliminating the need for specialized hardware to handle large datasets. For further reading on data formats, refer to resources on: ",(0,s.jsx)(t.a,{href:"https://www.cogeo.org/",children:"Cloud Optimized GeoTiff"}),", ",(0,s.jsx)(t.a,{href:"https://geoparquet.org/",children:"Geoparquet"}),", and ",(0,s.jsx)(t.a,{href:"https://geoarrow.org/format.html",children:"GeoArrow"}),"."]})}),"\n",(0,s.jsxs)(t.p,{children:["Tile mapping tools call Fused endpoints and dynamically pass an XYZ index for each Tile to render. When a UDF endpoint is called this way - in Tile mode - Fused passes the UDF a ",(0,s.jsx)(t.code,{children:"bbox"})," object as the first parameter. This object is a data structure with information that corresponds to the Tile's bounds and/or XYZ coordinates. The object is named ",(0,s.jsx)(t.code,{children:"bbox"})," by convention, but it's possible to use a different name as long as it's in the first parameter."]}),"\n",(0,s.jsxs)(t.p,{children:["For convenience, users can decide the structure of the ",(0,s.jsx)(t.code,{children:"bbox"})," object by setting explicit typing. The 3 available structures are:"]}),"\n",(0,s.jsx)(t.h5,{id:"fusedtypestilegdf",children:(0,s.jsx)(t.code,{children:"fused.types.TileGDF"})}),"\n",(0,s.jsxs)(t.p,{children:["This is a ",(0,s.jsx)(t.a,{href:"https://geopandas.org/en/stable/docs/reference/api/geopandas.GeoDataFrame.html",children:"geopandas.geodataframe.GeoDataFrame"})," with ",(0,s.jsx)(t.code,{children:"x"}),", ",(0,s.jsx)(t.code,{children:"y"}),", ",(0,s.jsx)(t.code,{children:"z"}),", and ",(0,s.jsx)(t.code,{children:"geometry"})," columns."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"@fused.udf\ndef udf(bbox: fused.types.TileGDF=None):\n    print(bbox)\n    return bbox\n\n>>>      x    y   z                                           geometry\n>>> 0  327  790  11  POLYGON ((-122.0 37.0, -122.0 37.1, -122.1 37.1, -122.1 37.0, -122.0 37.0))\n"})}),"\n",(0,s.jsx)(t.h5,{id:"fusedtypesbbox",children:(0,s.jsx)(t.code,{children:"fused.types.Bbox"})}),"\n",(0,s.jsxs)(t.p,{children:["This is a ",(0,s.jsx)(t.a,{href:"https://shapely.readthedocs.io/en/stable/reference/shapely.Polygon.html",children:"shapely.geometry.polygon.Polygon"})," corresponding to the Tile's bounds."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"@fused.udf\ndef udf(bbox: fused.types.Bbox=None):\n    print(bbox)\n    return bbox\n\n>>> POLYGON ((-122.0 37.0, -122.0 37.1, -122.1 37.1, -122.1 37.0, -122.0 37.0))\n"})}),"\n",(0,s.jsx)(t.h5,{id:"fusedtypestilexyz",children:(0,s.jsx)(t.code,{children:"fused.types.TileXYZ"})}),"\n",(0,s.jsxs)(t.p,{children:["This is a ",(0,s.jsx)(t.a,{href:"https://mercantile.readthedocs.io/en/stable/api/mercantile.html",children:"mercantile.Tile"})," object with values for the ",(0,s.jsx)(t.code,{children:"x"}),", ",(0,s.jsx)(t.code,{children:"y"}),", and ",(0,s.jsx)(t.code,{children:"z"})," Tile indices."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"@fused.udf\ndef udf(bbox: fused.types.TileXYZ=None):\n    print(bbox)\n    return bbox\n\n>>> Tile(x=328, y=790, z=11)\n"})}),"\n",(0,s.jsxs)(t.admonition,{type:"tip",children:[(0,s.jsxs)(t.p,{children:["If the UDF is called as a File, Fused does not pass a ",(0,s.jsx)(t.code,{children:"bbox"})," parameter. To write UDFs so they can be called in either execution mode, Fused recommends setting the ",(0,s.jsx)(t.code,{children:"bbox"})," as the first parameter, and typing it as a ",(0,s.jsx)(t.code,{children:"fused.types.Bbox"})," with a default value of ",(0,s.jsx)(t.code,{children:"None"}),". This will enable the UDF to run in both as ",(0,s.jsx)(t.code,{children:"File"})," (when ",(0,s.jsx)(t.code,{children:"bbox"})," isn\u2019t necessarily passed) and as a ",(0,s.jsx)(t.code,{children:"Tile"}),". For example:"]}),(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:"@fused.udf\ndef udf(bbox: fused.types.Bbox=None):\n    ...\n    return ...\n"})}),(0,s.jsxs)(t.p,{children:['When using the Fused Workbench, a UDF can be configured to render as "Auto" so Workbench automatically handles the output as ',(0,s.jsx)(t.code,{children:"Tile"})," if it statically checks that the above types are used in the UDF. Otherwise, it assumes File."]}),(0,s.jsxs)(t.p,{children:["UDFs called via the Fused Python SDK or HTTP requests run as Tile only if a parameter specifies the ",(0,s.jsx)(t.code,{children:"Tile"})," geometry."]})]}),"\n",(0,s.jsx)(t.h5,{id:"examples-of-using-the-bbox-object",children:"Examples of using the bbox object"}),"\n",(0,s.jsx)(t.h6,{id:"a-spatially-filter-raster-files",children:"a) Spatially filter raster files"}),"\n",(0,s.jsxs)(t.p,{children:["The Fused utility function ",(0,s.jsx)(t.code,{children:"utils.mosaic_tiff"})," and ",(0,s.jsx)(t.code,{children:"pystac-client"}),"'s ",(0,s.jsx)(t.code,{children:"catalog.search"})," illustrate how to use ",(0,s.jsx)(t.code,{children:"bbox"})," to spatially filter a dataset."]}),"\n",(0,s.jsxs)(t.p,{children:["For example, function ",(0,s.jsx)(t.code,{children:"utils.mosaic_tiff"})," generates a mosaic image from a list of TIFF files. ",(0,s.jsx)(t.code,{children:"bbox"})," defines the area of interest within the list of TIFF files set by ",(0,s.jsx)(t.code,{children:"tiff_list"}),"."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'@fused.udf\ndef udf(bbox: fused.types.TileGDF=None):\n\n    utils = fused.load("https://github.com/fusedio/udfs/tree/f928ee1/public/common/").utils\n    data = utils.mosaic_tiff(\n        bbox=bbox,\n        tiff_list=tiff_list,\n        output_shape=(256, 256),\n    )\n'})}),"\n",(0,s.jsxs)(t.p,{children:["As an example, the ",(0,s.jsx)(t.a,{href:"https://github.com/fusedio/udfs/blob/b89a3aab05cb75dab25abb73e4c17490844ab764/public/LULC_Tile_Example/LULC_Tile_Example.py#L21-L27",children:"LULC_Tile UDF"})," uses ",(0,s.jsx)(t.code,{children:"mosaic_tiff"})," to create a mosaic from a set of Land Cover tiffs."]}),"\n",(0,s.jsx)(t.h6,{id:"spatially-filter-stac-datasets",children:"Spatially filter STAC datasets"}),"\n",(0,s.jsxs)(t.p,{children:["STAC (",(0,s.jsx)(t.a,{href:"https://github.com/radiantearth/stac-spec",children:"SpatioTemporal Asset Catalog"}),") datasets can be queried by passing the bounding box\u2019s bounds (",(0,s.jsx)(t.code,{children:"bbox.bounds"}),") to the pystac client of the Python ",(0,s.jsx)(t.a,{href:"https://pypi.org/project/pystac-client/",children:"pystac-client"})," library."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'@fused.udf\ndef udf(bbox: fused.types.TileGDF=None):\n\n    import pystac_client\n    from pystac.extensions.eo import EOExtension as eo\n\n    catalog = pystac_client.Client.open(\n        "https://planetarycomputer.microsoft.com/api/stac/v1",\n        modifier=planetary_computer.sign_inplace,\n    )\n    items = catalog.search(\n        collections=[collection],\n        bbox=bbox.total_bounds,\n    ).item_collection()\n'})}),"\n",(0,s.jsx)(t.h3,{id:"call-a-udf-endpoint",children:"Call a UDF endpoint"}),"\n",(0,s.jsx)(t.h4,{id:"file-1",children:"File"}),"\n",(0,s.jsxs)(t.p,{children:["By default, a UDF runs as ",(0,s.jsx)(t.code,{children:"File"})," - it executes once and returns a single output that corresponds to the input parameters. The UDF endpoint behaves like a remote file in that calling it returns a single batch of data - but the endpoint also accepts parameters that dynamically influence the UDF's execution."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"https://www.fused.io/server/.../run/file?dtype_out_vector=csv\n"})}),"\n",(0,s.jsx)(t.p,{children:"This enables client applications to make an HTTP request and load the UDF's output data into the tool that makes the call."}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsx)(t.p,{children:"Note that files are downloaded entirely - even if the data is requested as a Parquet."})}),"\n",(0,s.jsx)(t.h4,{id:"tile-1",children:"Tile"}),"\n",(0,s.jsxs)(t.p,{children:["The same UDF's API endpoint can be called to run like a ",(0,s.jsx)(t.code,{children:"Tile"}),". This makes it possible for Fused to serve vector or raster tiles into industry standard tools that work with ",(0,s.jsx)(t.a,{href:"https://en.wikipedia.org/wiki/Tiled_web_map",children:"tiled web maps"})," - think Leaflet, Mapbox, Foursquare Studio, Lonboard, and beyond."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-bash",children:"https://www.fused.io/server/.../run/tiles/{z}/{x}/{y}?&dtype_out_vector=csv\n"})}),"\n",(0,s.jsx)(t.p,{children:"Tiling clients can make dozens of simultaneous calls to the Fused API endpoint - one for each tile - and seamlessly stitch the outputs to render a map. Instead of operating on an entire dataset, Fused only acts on the data that corresponds to the area visible in the current viewport."}),"\n",(0,s.jsx)(t.admonition,{type:"tip",children:(0,s.jsxs)(t.p,{children:["You can read more about the XYZ indexing system in the ",(0,s.jsx)(t.a,{href:"http://Deck.gl",children:"Deck.gl"})," ",(0,s.jsx)(t.a,{href:"https://deck.gl/docs/api-reference/geo-layers/tile-layer#indexing-system",children:"documentation"}),". In fact, Fused Workbench runs UDFs on a serverless backend and renders output in Deck.gl."]})})]})}function x(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(p,{...e})}):p(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>o});var s=n(6540);const a={},i=s.createContext(a);function r(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function o(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);