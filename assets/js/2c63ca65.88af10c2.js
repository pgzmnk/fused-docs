"use strict";(self.webpackChunkfused_docs=self.webpackChunkfused_docs||[]).push([[6624],{3053:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>l,contentTitle:()=>o,default:()=>h,frontMatter:()=>i,metadata:()=>r,toc:()=>d});var s=a(4848),n=a(8453);const i={id:"zonal-stats",title:"Zonal Stats",tags:["zonal","stats"]},o="Zonal Statistics",r={id:"basics/usecases/zonal-stats",title:"Zonal Stats",description:"Zonal statistics is a versatile tool to summarize raster data within defined zones, providing valuable insights across multiple domains. It's a geospatial technique that calculates aggregate statistics (e.g., mean, sum, maximum) of the pixel values of a raster (i.e. cell values) that fall within areas defined by another dataset. The method has diverse applications such as determining vegetation health in an agricultural field, assess surface water availability in watersheds, or approximate the height of buildings.",source:"@site/docs/basics/usecases/zonal_stats.mdx",sourceDirName:"basics/usecases",slug:"/basics/usecases/zonal-stats",permalink:"/fused-docs/basics/usecases/zonal-stats",draft:!1,unlisted:!1,tags:[{label:"zonal",permalink:"/fused-docs/tags/zonal"},{label:"stats",permalink:"/fused-docs/tags/stats"}],version:"current",frontMatter:{id:"zonal-stats",title:"Zonal Stats",tags:["zonal","stats"]},sidebar:"tutorialSidebar",previous:{title:"Buffer Analysis",permalink:"/fused-docs/basics/usecases/buffer"},next:{title:"Utilities",permalink:"/fused-docs/basics/utilities"}},l={},d=[{value:"The problem",id:"the-problem",level:2},{value:"The solution: Zonal Stats",id:"the-solution-zonal-stats",level:2},{value:"Conclusion",id:"conclusion",level:2}];function c(e){const t={code:"code",em:"em",h1:"h1",h2:"h2",li:"li",ol:"ol",p:"p",pre:"pre",...(0,n.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"zonal-statistics",children:"Zonal Statistics"}),"\n",(0,s.jsx)(t.p,{children:"Zonal statistics is a versatile tool to summarize raster data within defined zones, providing valuable insights across multiple domains. It's a geospatial technique that calculates aggregate statistics (e.g., mean, sum, maximum) of the pixel values of a raster (i.e. cell values) that fall within areas defined by another dataset. The method has diverse applications such as determining vegetation health in an agricultural field, assess surface water availability in watersheds, or approximate the height of buildings."}),"\n",(0,s.jsxs)(t.p,{children:['In this tutorial we\'ll focus on zonal statistics between a raster and polygons in a table. We\'ll explore how to perform zonal statistics to approximate the height of buildings using a digital surface model (DSM) raster dataset and a table of building footprint polygons. The raster is the ALOS Global DSM "ALOS World 3D - 30m (AW3D30)" captured by the PRISM optical sensor on the ALOS satellite, with a 30-meter horizontal resolution. The buildings dataset is the "Building Footprints" dataset from Microsoft, which contains the ',(0,s.jsx)(t.code,{children:"Polygon"})," of buildings in the United States."]}),"\n",(0,s.jsx)("div",{style:{textAlign:"center"},children:(0,s.jsx)("img",{src:"https://camo.githubusercontent.com/c2f7fcebe282d2834a24b95de0d2dca7cfbced457e7193f921afe2672ae9f771/68747470733a2f2f66757365642d6d616769632e73332e75732d776573742d322e616d617a6f6e6177732e636f6d2f7468756d626e61696c732f756466732d73746167696e672f44534d5f5a6f6e616c5f53746174732e706e67",alt:"File",style:{width:1200}})}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsxs)(t.em,{children:["Visual representation of building ",(0,s.jsx)(t.code,{children:"Polygon"})," objects colored based on DSM aggregate values."]})}),"\n",(0,s.jsx)(t.h2,{id:"the-problem",children:"The problem"}),"\n",(0,s.jsx)(t.p,{children:"Determining the pixels that within a polygon requires using analysis packages that can operate on both raster and vector data. Once the pixels are identified, we can calculate aggregate statistics such as the mean, sum, or maximum of the pixel values within the polygon."}),"\n",(0,s.jsx)(t.h2,{id:"the-solution-zonal-stats",children:"The solution: Zonal Stats"}),"\n",(0,s.jsxs)(t.p,{children:["To perform this operation, we can load raster and vector data for spatially overlapping area then perform zonal statistics using methods in ",(0,s.jsx)(t.code,{children:"xarray"})," and ",(0,s.jsx)(t.code,{children:"GeoPandas"})," libraries. Here's how to do this:"]}),"\n",(0,s.jsxs)(t.ol,{children:["\n",(0,s.jsx)(t.li,{children:"Load overlapping the raster and vector data"}),"\n",(0,s.jsxs)(t.li,{children:["For the extent of each ",(0,s.jsx)(t.code,{children:"Polygon"}),", clip the raster to create a mask array"]}),"\n",(0,s.jsx)(t.li,{children:"Perform an aggregation operation (e.g., mean, sum, max) on each masked array"}),"\n",(0,s.jsxs)(t.li,{children:["Return the results in a ",(0,s.jsx)(t.code,{children:"GeoDataFrame"}),", where each row corresponds to a ",(0,s.jsx)(t.code,{children:"Polygon"})," and the a columns contain the value for the aggregate zonal statistics"]}),"\n"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-python",children:'\n## Example\n\nThis example interactively illustrates zonal statistics between a raster and a table of polygons: the raster array is represented by a grayscale image of the DSM and the building footprint are represented with purple `Polygon` objects. \n\n\nUsers can interact with the checkboxes on the sidebar to toggle show/hide:\n- The raster image\n- The building footprint outlines\n- The building footprints colored by the mean pixel value of the raster\n\nYou\'ll notice that the building footprints are colored based on the mean pixel value of the raster within the polygon. The color scale ranges from dark (low values) to bright (high values). This visualization helps identify buildings with higher or lower height based on the average pixel values. \n\n\nimport Iframe from \'@site/src/components/Iframe\';\n\n<Iframe url="https://staging.fused.io/workbench#app/s/aH4sIAAAAAAAAA91WW2%2FrNgz%2BK4IL7CRD4kviOHYAY9hWdMAw4ABrz17qwpBtxdGpInkSnTYJ8t8PHSfNpZd1e9iK5YJIJC2K5EfmW1u5Kpg1sfi8UhpItSxYfk%2BoIVVxn8id1IBmdC44NAoDiUzkBfkZZcDInFaJFBR6RMiSxMR37XEQBaMe6Y%2BHdhS5buQ3Dwi6ZNqgwTqRBF%2BJpakBphNr0viyf2v0nVbX6n%2FigIdv5YnVO2guSEGBxok1A6jMxHEM0JLL0p7WhhU2V45hesG0s%2FAcvKMAPmd9M6OaFU6WeeE4D0aF606nhYvvaU5d5nquGwZRlOehW0QRzULqZ5HveVN%2F5I18tBqOo2EQTh1dSwe4YMZZrzbO%2BhG%2Fy80PBSwrlqoa0jaouJLldwfhguWgdFwy9dUoeRIMn9OS%2FeexeL7jhwPfCbxR8HIwmkGtZaqyrxhLTPVpSTJVy8LEt%2F2xb7vuMHKDAQJgCwXceIMQQTAKwx0mQi8aDkfRcLyzCd2R7%2FlDLwzcoeffHZ2rKppzWMaDk%2FKDUpiIKl4nFrBHaBCUWD%2BWJVlQUbMJWecSNom1QdObz5efJ%2BTL5RUxM1WLgrRxkEqrimngzLQHd3t7VLa1eh2VvzD1KxbxOSw%2FBCi9wPGiQRQ6Az8YvFLKd%2BGy4vk9zQSLb3TNjuRTLgQr4isqzLEYJ4S6R%2FmZdckgFVyyNFcCHSXWLcbUI%2FgZjAZ3Jw6fTB94AbPY750Wpi3lfv2pDWfw6XmVLnZ1%2Bn1rcYNZOS3Vxccp1l9NkLM7PzUDpnAvP8dtalb%2FALr%2Fq4n6IUL5t%2FrwTLpvw%2FP2bJqreeLQh4cBaOc4vOF7e9gjz4Su7bkviN9uXfdIdRjVT6IWiy8P7nNPOMUPD2565G9O9E3LVK64wJyTjCICiJIknyHHydRjY4qHPOyKgtzEgG14wTKq7b1RJ7Gu0Ybs2Uqvvew2811kSFMiFZCjYyat%2F5bv2JWqOgeq0905bAv%2BtsP9H9EbDluTlxzuHz51mK7Me3ySBw4zslKSCjSmYN5xCTz69Xtsp1K3KQb6bilmmmPPwW48NePqEoVH0wqZX2pgKRpuhGu847aXl01ztXunoPq%2Bv4hO6ZTkwKlIF5w9pM3dWdwc%2Fgdur5td5xSHyFs51AWLGwJ7plKy3OlkeaZbKTWPvdGZtOKQn6K%2Fe7Ru0xILbqCzS9E2pabT3ZthhrpWz9Lsz5prNmcSjDW5tXAsVFQW1Ox0zECzfEQSRpe4WFIt8KfNKy62lJIrXM0pVEKB4Blunkh8n%2BbMukM7c1ULcZ1rxqQ1mTYjY%2FMNoFCyqxAMAAA%3D"/>\n\n## Applications\n\nIn building and urban analysis, zonal statistics can be used to:\n- Approximate the height of buildings using DSM.\n- Determine buildings with greenery on rooftops using NDVI rasters.\n- Identify buildings with solar panels using solar radiation rasters.\n\nZonal statistics can be applied to various fields beyond building analysis:\n- Precision Agriculture: Determine vegetation health within crop polygons using NDVI rasters.\n- Water Resource Management: Assess surface water availability in watersheds using NDWI rasters.\n- Environmental Monitoring: Track forest cover percentage within administrative zones and monitor changes over time using LULC rasters.\n- Assess building density in urban areas using LULC rasters.\n\n\n\n\n## Scaling up\n\nZonal stats can be challenging to implement on large datasets because some tools are specialized to work with either, but not both. As such, handling large datasets, such as nationwide building footprints and high-resolution rasters, requires strategic approaches to process data.  \n\nTo perform zonal stats on large datasets, Fused UDFs can be used to spatially filter the raster and table to only perform calculations over subsections of the data that spatially overlap. This enables the computation to be performed in parallel across multiple workers, making it scalable to any size dataset.\n\nThis example UDF loads the building footprint table `gdf` and DSM raster `arr` from S3 only for a section defined by `bbox`, which corresponds to a map tile. It then calculates the zonal statistics, and returns the results as the `GeoDataFrame` `gdf_zonal`. This process enables Fused workbench to perform the calculation dynamically as users scroll and zoom in the map. \n\n```python\n@fused.udf\ndef udf(\n    bbox, min_zoom=15, table="s3://fused-asset/infra/building_msft_us/", chip_len=256\n):\n    import utils\n\n    gdf = utils.table_to_tile(bbox, table, min_zoom)\n    arr = utils.dsm_to_tile(bbox, z_levels=[4, 6, 9, 11], verbose=False)\n    gdf_zonal = utils.geom_stats(gdf, arr, chip_len=chip_len)\n    return gdf_zonal\n'})}),"\n",(0,s.jsx)(t.h2,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(t.p,{children:"While zonal statistics is a valuable tool, it's often just the starting point for more complex analyses. Combining zonal statistics with other techniques such time series analysis or machine learning approaches can provide even richer insights into your data."})]})}function h(e={}){const{wrapper:t}={...(0,n.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},8453:(e,t,a)=>{a.d(t,{R:()=>o,x:()=>r});var s=a(6540);const n={},i=s.createContext(n);function o(e){const t=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function r(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),s.createElement(i.Provider,{value:t},e.children)}}}]);