"use strict";(self.webpackChunkfused_docs=self.webpackChunkfused_docs||[]).push([[9918],{2989:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>h,frontMatter:()=>a,metadata:()=>l,toc:()=>u});var i=t(4848),r=t(8453),s=t(8987),o=(t(1023),t(290),t(6012));const a={title:"BigQuery",sidebar_label:"BigQuery",path:"basics/in/bigquery/bigquery",nb_path:"basics/in/bigquery.ipynb",github:"https://github.com/fusedio//fused-docs/blob/main/docs/basics/in/bigquery.ipynb",colab:"https://githubtocolab.com/fusedio//fused-docs/blob/main/docs/basics/in/bigquery.ipynb",description:"Load BigQuery data with Fused!"},c="Google BigQuery",l={id:"basics/in/bigquery/Bigquery",title:"BigQuery",description:"Load BigQuery data with Fused!",source:"@site/docs/basics/in/bigquery/Bigquery.mdx",sourceDirName:"basics/in/bigquery",slug:"/basics/in/bigquery/",permalink:"/basics/in/bigquery/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{title:"BigQuery",sidebar_label:"BigQuery",path:"basics/in/bigquery/bigquery",nb_path:"basics/in/bigquery.ipynb",github:"https://github.com/fusedio//fused-docs/blob/main/docs/basics/in/bigquery.ipynb",colab:"https://githubtocolab.com/fusedio//fused-docs/blob/main/docs/basics/in/bigquery.ipynb",description:"Load BigQuery data with Fused!"},sidebar:"tutorialSidebar",previous:{title:"Earth on AWS",permalink:"/basics/in/awsearth/"},next:{title:"CSV",permalink:"/basics/in/csv/"}},d={},u=[{value:"1. Generate Google access credentials json",id:"1-generate-google-access-credentials-json",level:2},{value:"2. Set the Access Credentials",id:"2-set-the-access-credentials",level:2},{value:"3. Run a UDF that interfaces BigQuery",id:"3-run-a-udf-that-interfaces-bigquery",level:2}];function g(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",p:"p",pre:"pre",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(s.A,{githubUrl:"https://github.com/fusedio//fused-docs/blob/main/docs/basics/in/bigquery.ipynb",colabUrl:"https://githubtocolab.com/fusedio//fused-docs/blob/main/docs/basics/in/bigquery.ipynb"}),"\n",(0,i.jsx)(n.h1,{id:"google-bigquery",children:"Google BigQuery"}),"\n","\n","\n",(0,i.jsxs)(n.p,{children:["Fused interfaces ",(0,i.jsx)(o.A,{color:"#3399ff",children:"Google BigQuery"})," through the Python\n",(0,i.jsx)(n.code,{children:"bigquery"})," library enabling efficient data processing and analysis. Follow these steps\nto harness the power of BigQuery within your Fused environment."]}),"\n",(0,i.jsx)(n.h2,{id:"1-generate-google-access-credentials-json",children:"1. Generate Google access credentials json"}),"\n",(0,i.jsxs)(n.p,{children:["Before proceeding, ensure you have access credentials for Google Cloud Platform (GCP).\nFollow the guide\n",(0,i.jsx)(n.a,{href:"https://developers.google.com/workspace/guides/create-credentials",children:"here"})," to create the\nnecessary credentials."]}),"\n",(0,i.jsx)(n.h2,{id:"2-set-the-access-credentials",children:"2. Set the Access Credentials"}),"\n",(0,i.jsxs)(n.p,{children:["Run a UDF to set the Google access credentials as a json file in your Fused account's\nfile system. This process resembles\n",(0,i.jsx)(n.a,{href:"/basics/utilities/#environment-variables",children:"setting an environment variables file"}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["Implement the following Python code snippet to set your credentials json string in the\nenvironment. The base of your account's filesystem of the Fused Hosted API is\n",(0,i.jsx)(n.code,{children:"/mnt/cache/"}),"."]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import fused\n\n\n@fused.udf\ndef udf():\n    credentials_json_string = "..."\n\n    # Path to your credentials json file\n    env_file_path = "/mnt/cache/my_gee_creds.json"\n\n    # Write the json string to the .json file\n    with open(env_file_path, "w") as file:\n        file.write(credentials_json_string)\n'})}),"\n",(0,i.jsx)(n.h2,{id:"3-run-a-udf-that-interfaces-bigquery",children:"3. Run a UDF that interfaces BigQuery"}),"\n",(0,i.jsx)(n.p,{children:"Now, you can run queries on BigQuery directly from your Fused environment. See the\nexample code snippet below:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'import fused\n\n\n@fused.udf\ndef udf(bbox=None, geography_column=None):\n    from google.cloud import bigquery\n    from google.oauth2 import service_account\n\n    # This UDF will only work on runtime with mounted EFS\n    key_path = "/mnt/cache/my_gee_creds.json"\n\n    # Authenticate BigQuery\n    credentials = service_account.Credentials.from_service_account_file(\n        key_path, scopes=["https://www.googleapis.com/auth/cloud-platform"]\n    )\n\n    # Create a BigQuery client\n    client = bigquery.Client(credentials=credentials, project=credentials.project_id)\n\n    # Structure spatial query\n    query = f"""\n        SELECT * FROM `bigquery-public-data.new_york.tlc_yellow_trips_2015`\n        LIMIT 10\n    """\n\n    if geography_column:\n        return client.query(query).to_geodataframe(geography_column=geography_column)\n    else:\n        return client.query(query).to_dataframe()\n'})}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python"})})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(g,{...e})}):g(e)}},1023:(e,n,t)=>{t.d(n,{A:()=>h});t(6540);var i,r=new Uint8Array(16);function s(){if(!i&&!(i="undefined"!=typeof crypto&&crypto.getRandomValues&&crypto.getRandomValues.bind(crypto)||"undefined"!=typeof msCrypto&&"function"==typeof msCrypto.getRandomValues&&msCrypto.getRandomValues.bind(msCrypto)))throw new Error("crypto.getRandomValues() not supported. See https://github.com/uuidjs/uuid#getrandomvalues-not-supported");return i(r)}const o=/^(?:[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}|00000000-0000-0000-0000-000000000000)$/i;const a=function(e){return"string"==typeof e&&o.test(e)};for(var c=[],l=0;l<256;++l)c.push((l+256).toString(16).substr(1));const d=function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,t=(c[e[n+0]]+c[e[n+1]]+c[e[n+2]]+c[e[n+3]]+"-"+c[e[n+4]]+c[e[n+5]]+"-"+c[e[n+6]]+c[e[n+7]]+"-"+c[e[n+8]]+c[e[n+9]]+"-"+c[e[n+10]]+c[e[n+11]]+c[e[n+12]]+c[e[n+13]]+c[e[n+14]]+c[e[n+15]]).toLowerCase();if(!a(t))throw TypeError("Stringified UUID is invalid");return t};const u=function(e,n,t){var i=(e=e||{}).random||(e.rng||s)();if(i[6]=15&i[6]|64,i[8]=63&i[8]|128,n){t=t||0;for(var r=0;r<16;++r)n[t+r]=i[r];return n}return d(i)};var g=t(4848);const h=e=>(0,g.jsxs)("div",{style:{backgroundColor:"var(--ifm-background-surface-color)",marginBottom:"var(--ifm-leading)",borderRadius:"var(--ifm-global-radius)",boxShadow:"var(--ifm-global-shadow-lw)",overflow:"hidden",padding:"10px",font:"var(--ifm-code-font-size) / var(--ifm-pre-line-height) var(--ifm-font-family-monospace)"},children:[(0,g.jsx)("span",{style:{color:"var(--ifm-color-primary)"},children:"Out: "}),(0,g.jsx)("pre",{style:{margin:"0px",backgroundColor:"inherit"},children:e.children.split("\n").map((e=>(0,g.jsx)("p",{style:{marginBottom:"0px"},children:e},u())))})]})},8987:(e,n,t)=>{t.d(n,{A:()=>s});t(6540);var i=t(8774),r=t(4848);const s=e=>{let{githubUrl:n,colabUrl:t}=e;return(0,r.jsxs)("div",{className:"link-buttons",style:{textAlign:"right"},children:[(0,r.jsx)("br",{}),(0,r.jsx)(i.A,{to:t,children:(0,r.jsx)("img",{src:"https://colab.research.google.com/assets/colab-badge.svg",alt:"Open in Colab"})})," ",(0,r.jsx)(i.A,{to:n,children:(0,r.jsx)("img",{src:"https://badgen.net/static/GitHub/Open/blue?icon=github",alt:"Open in GitHub"})})]})}},290:(e,n,t)=>{t(6540);var i=t(3259),r=t.n(i),s=(t(2303),t(4848));r()({loader:()=>t.e(1236).then(t.bind(t,1236)),loading:e=>{let{timedOut:n}=e;return n?(0,s.jsx)("blockquote",{children:"Error: Loading Plotly timed out."}):(0,s.jsx)("div",{children:"loading..."})},timeout:1e4})},6012:(e,n,t)=>{t.d(n,{A:()=>r});t(6540);var i=t(4848);function r(e){let{children:n,color:t}=e;return(0,i.jsx)("span",{style:{backgroundColor:t,borderRadius:"4px",color:"#fff",padding:"0.2rem 0.5rem",fontWeight:"bold"},children:n})}},8453:(e,n,t)=>{t.d(n,{R:()=>o,x:()=>a});var i=t(6540);const r={},s=i.createContext(r);function o(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);