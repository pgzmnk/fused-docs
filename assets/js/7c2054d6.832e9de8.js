"use strict";(self.webpackChunkfused_docs=self.webpackChunkfused_docs||[]).push([[4174],{7228:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>s,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>u});var a=t(4848),o=t(8453),r=t(3650);const i={},s="H3 NYC Taxi Fare by CBG",d={id:"basics/tutorials/h3-nyctaxi-face",title:"H3 NYC Taxi Fare by CBG",description:"",source:"@site/docs/basics/tutorials/h3-nyctaxi-face.mdx",sourceDirName:"basics/tutorials",slug:"/basics/tutorials/h3-nyctaxi-face",permalink:"/fused-docs/basics/tutorials/h3-nyctaxi-face",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"DuckDB",permalink:"/fused-docs/basics/tutorials/duckdb/"},next:{title:"HuggingFace",permalink:"/fused-docs/basics/tutorials/huggingface"}},c={},u=[];function l(e){const n={code:"code",h1:"h1",pre:"pre",...(0,o.R)(),...e.components};return(0,a.jsxs)(a.Fragment,{children:[(0,a.jsx)(n.h1,{id:"h3-nyc-taxi-fare-by-cbg",children:"H3 NYC Taxi Fare by CBG"}),"\n",(0,a.jsx)(n.pre,{children:(0,a.jsx)(n.code,{className:"language-python",children:"@fused.udf\ndef udf(year: str = '2010', month: str = '01', n_rows: int = 1000, h3_size: int=12, object_to_show: str='h3'):\n    import geopandas as gpd\n    import h3\n    import pandas as pd\n    from utils import generate_color_from_identifier\n\n\n    @fused.cache\n    def load_taxi_data(year, month):\n        print(132)\n        return pd.read_parquet(f'https://d37ci6vzurychx.cloudfront.net/trip-data/yellow_tripdata_{year}-{month}.parquet')\n\n    \n    @fused.cache\n    def load_census_blocks(counties=[\"061\"]):\n        url=\"https://www2.census.gov/geo/tiger/TIGER_RD18/STATE/36_NEW_YORK/36/tl_rd22_36_bg.zip\"\n        gdf = gpd.read_file(url)\n        gdf = gdf[gdf[\"COUNTYFP\"].isin(counties)]\n        return gdf\n\n    # Load data\n    gdf = load_census_blocks()\n    taxi_data = load_taxi_data(year='2010', month='01').head(n_rows)\n\n    # Generate H3 column\n    # TODO: use DuckDB\n    taxi_data['pickup_h3'] = taxi_data.apply(lambda row: h3.latlng_to_cell(row['pickup_latitude'], row['pickup_longitude'], h3_size), axis=1)\n    gdf['hex'] = gdf.geometry.apply(lambda geom: list(h3.geo_to_cells(geom.__geo_interface__, h3_size)))\n    gdf_exploded = gdf.explode('hex').reset_index(drop=True)\n    gdf_exploded = gdf_exploded.dropna(axis=0, subset='hex')\n\n    # Join on H3 index\n    joined = taxi_data.merge(gdf_exploded, left_on='pickup_h3', right_on='hex', how='left')\n    joined[['r', 'g', 'b']] = gpd.GeoDataFrame(joined['GEOID'].apply(generate_color_from_identifier).tolist(), index=joined.index)\n    \n\n    joined_pickup_count = joined[['hex', 'fare_amount', 'GEOID', 'r', 'g', 'b']].groupby('hex').sum()\n    cols = ['hex', \"fare_amount\", \"GEOID\", 'r', 'g', 'b']\n    joined_pickup_count.reset_index(inplace=True)\n    print(joined_pickup_count.T)\n    if object_to_show == 'h3':\n        return joined_pickup_count[cols]\n    else:\n        return gdf\n\n\n"})}),"\n","\n","\n",(0,a.jsx)(r.A,{url:"https://staging.fused.io/workbench#app/s/aH4sIAAAAAAAAA41UbW%2FbNhD%2BKwQ7IDagOLJlW7YBAVtbpMXQT%2Bu2L1YgUOJJYk2TKkkldoP8951eqsiZP5QWzOMd74733EM%2B00xzoDsqjpU2jlRnDtmBMEsqfohVr7XOADtK4RqDdYM%2Bry3whFXVoClAV0xx3IZfUfFYNT%2FrZk44CZOYfg7IPTNA0jP5AMrWlryXGjN%2BMrquYjrtHN6RL5pxwpljJDf6SP75eE8yJmWsnD6AIhG58RdsFeDHN%2Bt0BTxchnkO23nqb9ecB%2BGWL1O22PBgvVmzLNzm4SaEYLHla55ulv46vWkS%2FY5Hy1hWQtLkihWHnEhM3S4nKjH6yUYrH4dHyiCx4gdE8%2Fl0FyuCg%2Bd4kAGEmanVpD2eR3T6DTKXOJ3YUj9FN5WW50Ire%2BORPmg3vUbt5%2BnPyEkZ%2FGrwMvjVsAZcbRRG97oMDQTDAtO9lo4OUhUekcyhfnIbBrPtJgy3K48s%2FVm4Wq62y6FZH5AeDgj2VrIzGHRtJvRDEs2%2BNPKky9%2F0%2FzOcGELRqmPqjert5UpkB5ZKiP42NfQ6ZCDWzseqXEh5qYGTMzW%2F1BXgkrLLGMUUpSFlY2liJJmW2qBxb7zCSx8uNkihoN%2BwXyyRBAsEwH%2Fod7TWJ8FdmRyFSipxAmkjfzYfRQAJj8yJNn2OzE%2FYUdfKDVkGe2KR4MiuWLW4thAmPW%2BuQDkeMf0E%2Bk%2F7FtTxaJoaYav%2Fb3mDw36xWnVlBljufKj1rcsFMp1L89e4%2BFedrrTwaswWz2juv9kz9Tqu%2FQV4SU37pnSPVZKVzLgelQalj6gcgXRkVWLdGaGNKcqpPu3u7lqFvevWd5yZw%2B3jfH6BnFDCCSaTRwFPGAAJHjXR%2F8Xl12Y1washHPItQgEvilZFv2zuzQ%2Btj9Ec4UiBGaGK6BbRqYTLymjhT0dp2j7baH9Zbav1yBXlT0q8msZgO62lE1X0HFOH1yGmOyTHH49F9%2Bh21NuR355HTHyJ6UsXYNpTj3rUwPdaGDiCcpbu9nR413sbWNeIJ2YMO6NwZkbi1HWEPnhU2Ptayq%2BZAVB0lzNp4eU%2F1LU8zW0GAAA%3D"})]})}function p(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,a.jsx)(n,{...e,children:(0,a.jsx)(l,{...e})}):l(e)}},3650:(e,n,t)=>{t.d(n,{A:()=>o});t(6540);var a=t(4848);function o(e){let{children:n,url:t}=e;return(0,a.jsx)("iframe",{src:t,height:"1050px",width:"100%",scrolling:"no"})}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>s});var a=t(6540);const o={},r=a.createContext(o);function i(e){const n=a.useContext(r);return a.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),a.createElement(r.Provider,{value:n},e.children)}}}]);