"use strict";(self.webpackChunkfused_docs=self.webpackChunkfused_docs||[]).push([[7355],{4607:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>h,contentTitle:()=>c,default:()=>y,frontMatter:()=>l,metadata:()=>d,toc:()=>p});var r=t(4848),o=t(8453);const s=t.p+"assets/images/viz_tab-1fdbd328c6bc0aa14db690990e49bbc4.png",i=t.p+"assets/images/vector-viz-8139c5ffc430911a47efc27d3a7b46be.png",a=t.p+"assets/images/raster-pickable-49d7530a4082533c6d4abb58e44c9a81.png",l={},c="Layer styling",d={id:"workbench/viz-styling",title:"Layer styling",description:'To style the visual representation of a UDF\'s output, configure it under the "Visualization" tab. The Workbench DeckGL map uses @deck.gl/json to implement a TileLayer with a sublayer for either a rasterLayer or a vectorLayer - both are set by default for flexibility, but only the one corresponding to the UDF output type is used.',source:"@site/docs/workbench/viz-styling.mdx",sourceDirName:"workbench",slug:"/workbench/viz-styling",permalink:"/workbench/viz-styling",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Results",permalink:"/workbench/results"},next:{title:"Contribute to Fused \ud83c\udf6a",permalink:"/contribute"}},h={},p=[{value:"<code>H3HexagonLayer</code>",id:"h3hexagonlayer",level:2},{value:"Vector <code>GeoJsonLayer</code>",id:"vector-geojsonlayer",level:2},{value:"Raster <code>BitmapLayer</code>",id:"raster-bitmaplayer",level:2},{value:"Custom <code>loadingLayer</code> and <code>errorLayer</code>",id:"custom-loadinglayer-and-errorlayer",level:2}];function u(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",img:"img",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"layer-styling",children:"Layer styling"}),"\n",(0,r.jsxs)(n.p,{children:['To style the visual representation of a UDF\'s output, configure it under the "Visualization" tab. The Workbench DeckGL map uses ',(0,r.jsx)(n.a,{href:"https://deck.gl/docs/api-reference/json/conversion-reference",children:(0,r.jsx)(n.code,{children:"@deck.gl/json"})})," to implement a ",(0,r.jsx)(n.code,{children:"TileLayer"})," with a sublayer for either a ",(0,r.jsx)(n.code,{children:"rasterLayer"})," or a ",(0,r.jsx)(n.code,{children:"vectorLayer"})," - both are set by default for flexibility, but only the one corresponding to the UDF output type is used."]}),"\n","\n",(0,r.jsx)("div",{style:{textAlign:"center"},children:(0,r.jsx)("img",{src:s,alt:"Gls",style:{}})}),"\n",(0,r.jsxs)(n.p,{children:["Styles to keep in mind are ",(0,r.jsx)(n.code,{children:"H3HexagonLayers"})," and Vector ",(0,r.jsx)(n.code,{children:"GeoJsonLayer"}),"."]}),"\n",(0,r.jsx)(n.h2,{id:"h3hexagonlayer",children:(0,r.jsx)(n.code,{children:"H3HexagonLayer"})}),"\n",(0,r.jsxs)(n.p,{children:["The visualization json for a H3HexagonLayer that for a returned ",(0,r.jsx)(n.code,{children:"DataFrame"})," dynamically sets ",(0,r.jsx)(n.code,{children:"getHexagon"})," from an H3 index column (every row must be at the same H3 resolution), then ",(0,r.jsx)(n.code,{children:"getFillColor"})," & ",(0,r.jsx)(n.code,{children:"getElevation"})," properties from a value column might look like this."]}),"\n",(0,r.jsx)("iframe",{src:"/img/deckgl_h3.html",height:"400px",width:"100%",scrolling:"no"}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "tileLayer": {\n    "@@type": "TileLayer",\n    "minZoom": 0,\n    "maxZoom": 19,\n    "tileSize": 256,\n    "pickable": true\n  },\n  "vectorLayer": {\n    "opacity": 2,\n    "@@type": "H3HexagonLayer",\n    "stroked": true,\n    "filled": true,\n    "pickable": true,\n    "getHexagon": "@@=hex",\n    "getFillColor": "@@=[count, count, count]",\n    "getElevation": "@@=count",\n    "elevationScale": 4\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"vector-geojsonlayer",children:["Vector ",(0,r.jsx)(n.code,{children:"GeoJsonLayer"})]}),"\n",(0,r.jsxs)(n.p,{children:["The visualization json for a vector tile layer that dynamically sets ",(0,r.jsx)(n.code,{children:"getLineColor"})," properties from the returned GeoDataFrame might look like this."]}),"\n","\n",(0,r.jsx)("div",{style:{textAlign:"center"},children:(0,r.jsx)("img",{src:i,alt:"Gls",style:{}})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "tileLayer": {\n    "@@type": "TileLayer",\n    "minZoom": 0,\n    "maxZoom": 15,\n    "tileSize": 256,\n    "pickable": true\n  },\n  "vectorLayer": {\n    "@@type": "GeoJsonLayer",\n    "stroked": true,\n    "filled": true,\n    "pickable": true,\n    "extruded": true,\n    "getElevation": "@@=properties.stats*1",\n    "lineWidthMinPixels": 1,\n    "getLineColor": {\n      "@@function": "hasProp",\n      "property": "stats",\n      "present": "@@=[properties.stats*5, properties.stats*3, properties.stats*2]",\n      "absent": [255, 0, 255]\n    },\n    "getFillColor": "@@=[properties.stats*5, properties.stats*3, properties.stats*2]"\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"raster-bitmaplayer",children:["Raster ",(0,r.jsx)(n.code,{children:"BitmapLayer"})]}),"\n",(0,r.jsxs)(n.p,{children:["Raster layers can be set to display a tooltip on hover by setting the ",(0,r.jsx)(n.code,{children:"pickable"})," property to ",(0,r.jsx)(n.code,{children:"true"}),". See ",(0,r.jsx)(n.a,{href:"https://deck.gl/docs/api-reference/layers/bitmap-layer#pixel-picking",children:"DeckGL documentation"}),"."]}),"\n","\n","\n",(0,r.jsx)("div",{style:{textAlign:"center"},children:(0,r.jsx)("img",{src:a,alt:"File",style:{}})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "tileLayer": {\n    "@@type": "TileLayer",\n    "minZoom": 0,\n    "maxZoom": 19,\n    "tileSize": 256,\n    "pickable": true\n  },\n  "rasterLayer": {\n    "@@type": "BitmapLayer",\n    "pickable": true\n  }\n}\n'})}),"\n",(0,r.jsxs)(n.h2,{id:"custom-loadinglayer-and-errorlayer",children:["Custom ",(0,r.jsx)(n.code,{children:"loadingLayer"})," and ",(0,r.jsx)(n.code,{children:"errorLayer"})]}),"\n",(0,r.jsxs)(n.p,{children:["When ",(0,r.jsx)(n.code,{children:"tileLayer"})," has ",(0,r.jsx)(n.code,{children:'"@@type": "DebugTileLayer"'})," set ",(0,r.jsx)(n.code,{children:"loadingLayer"})," and ",(0,r.jsx)(n.code,{children:"errorLayer"})," can be configured to show the user that the UDF is still processing or that an error occurred. This is helpful for debugging."]}),"\n",(0,r.jsx)(n.p,{children:(0,r.jsx)(n.img,{src:"https://fused-magic.s3.us-west-2.amazonaws.com/docs_assets/gifs/debug_viz.gif",alt:"alt text"})}),"\n",(0,r.jsx)(n.pre,{children:(0,r.jsx)(n.code,{className:"language-json",children:'{\n  "tileLayer": {\n    "@@type": "DebugTileLayer",\n    "minZoom": 0,\n    "maxZoom": 15,\n    "tileSize": 256,\n    "pickable": true\n  },\n  "rasterLayer": {\n    "@@type": "BitmapLayer",\n    "pickable": true\n  },\n  "vectorLayer": {\n    "@@type": "GeoJsonLayer",\n    "stroked": true,\n  },\n  "loadingLayer": {\n    "@@type": "GeoJsonLayer",\n    "stroked": true,\n    "filled": false,\n    "pickable": true,\n    "lineWidthMinPixels": 10,\n    "getLineColor": [\n      25,\n      55,\n      0,\n      255\n    ],\n    "getFillColor": [\n      5,\n      20,\n      255,\n      40\n    ]\n  },\n  "errorLayer": {\n    "@@type": "GeoJsonLayer",\n    "stroked": true,\n    "filled": true,\n    "pickable": true,\n    "lineWidthMinPixels": 10,\n    "getLineColor": [\n      255,\n      255,\n      0,\n      255\n    ],\n    "getFillColor": [\n      255,\n      20,\n      255,\n      40\n    ]\n  }\n}\n'})})]})}function y(e={}){const{wrapper:n}={...(0,o.R)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(u,{...e})}):u(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>i,x:()=>a});var r=t(6540);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);