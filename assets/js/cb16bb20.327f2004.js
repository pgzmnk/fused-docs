"use strict";(self.webpackChunkfused_docs=self.webpackChunkfused_docs||[]).push([[3519],{3923:(e,n,s)=>{s.r(n),s.d(n,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>o,metadata:()=>r,toc:()=>a});var i=s(4848),l=s(8453);const o={sidebar_label:"api",title:"fused.api.api"},t=void 0,r={id:"reference/fused/api/api",title:"fused.api.api",description:"FusedAPI Objects",source:"@site/docs/reference/fused/api/api.md",sourceDirName:"reference/fused/api",slug:"/reference/fused/api/",permalink:"/fused-docs/reference/fused/api/",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{sidebar_label:"api",title:"fused.api.api"},sidebar:"tutorialSidebar",previous:{title:"_public_api",permalink:"/fused-docs/reference/fused/api/_public_api"},next:{title:"credentials",permalink:"/fused-docs/reference/fused/api/credentials"}},d={},a=[{value:"FusedAPI Objects",id:"fusedapi-objects",level:2},{value:"__init__",id:"__init__",level:2},{value:"sample_map",id:"sample_map",level:2},{value:"sample_join",id:"sample_join",level:2},{value:"sample_single_file_join",id:"sample_single_file_join",level:2},{value:"start_job",id:"start_job",level:2},{value:"create_udf_access_token",id:"create_udf_access_token",level:2},{value:"get_jobs",id:"get_jobs",level:2},{value:"get_status",id:"get_status",level:2},{value:"get_logs",id:"get_logs",level:2},{value:"tail_logs",id:"tail_logs",level:2},{value:"wait_for_job",id:"wait_for_job",level:2},{value:"cancel_job",id:"cancel_job",level:2},{value:"show",id:"show",level:2},{value:"show_multi",id:"show_multi",level:2},{value:"show_multi_v2",id:"show_multi_v2",level:2},{value:"_whoami",id:"_whoami",level:2},{value:"_list_realtime_instances",id:"_list_realtime_instances",level:2},{value:"upload",id:"upload",level:2},{value:"_upload_tmp",id:"_upload_tmp",level:2},{value:"_replace_df_input",id:"_replace_df_input",level:2},{value:"_health",id:"_health",level:2},{value:"auth_token",id:"auth_token",level:2}];function c(e){const n={code:"code",h2:"h2",li:"li",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,l.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h2,{id:"fusedapi-objects",children:"FusedAPI Objects"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"class FusedAPI()\n"})}),"\n",(0,i.jsx)(n.p,{children:"API for running jobs in the Fused service."}),"\n",(0,i.jsx)(n.h2,{id:"__init__",children:"__init__"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def __init__(*,\n             base_url: Optional[str] = None,\n             set_global_api: bool = True,\n             credentials_needed: bool = True)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Create a FusedAPI instance."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"base_url"})," - The Fused instance to send requests to. Defaults to ",(0,i.jsx)(n.code,{children:"https://www.fused.io/server/v1"}),"."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"set_global_api"})," - Set this as the global API object. Defaults to True."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"credentials_needed"})," - If True, automatically attempt to log in. Defaults to True."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"sample_map",children:"sample_map"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def sample_map(config: MapJobStepConfig,\n               *,\n               file_id: Optional[Union[str, int]] = None,\n               chunk_id: Optional[int] = None,\n               n_rows: Optional[int] = None) -> MapInput\n"})}),"\n",(0,i.jsx)(n.p,{children:"Fetch a sample of an operation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"config"})," - The configuration to sample from."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"file_id"})," - The identifier of this file. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"chunk_id"})," - The numeric index of the chunk within the file to fetch. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"n_rows"})," - The maximum number of rows to sample. Defaults to None for all rows in the chunk."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"sample_join",children:"sample_join"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def sample_join(config: JoinJobStepConfig,\n                *,\n                file_id: Optional[Union[str, int]] = None,\n                chunk_id: Optional[int] = None,\n                n_rows: Optional[int] = None) -> JoinInput\n"})}),"\n",(0,i.jsx)(n.p,{children:"Fetch a sample of an operation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"config"})," - The configuration to sample from."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"file_id"})," - The identifier of this file. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"chunk_id"})," - The numeric index of the chunk within the file to fetch. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"n_rows"})," - The maximum number of rows to sample from the left dataset. Defaults to None for all rows in the chunk."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"sample_single_file_join",children:"sample_single_file_join"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def sample_single_file_join(\n        config: JoinSinglefileJobStepConfig,\n        *,\n        file_id: Optional[Union[str, int]] = None,\n        chunk_id: Optional[int] = None,\n        n_rows: Optional[int] = None) -> JoinSingleFileInput\n"})}),"\n",(0,i.jsx)(n.p,{children:"Fetch a sample of an operation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"config"})," - The configuration to sample from."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"file_id"})," - The identifier of this file. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"chunk_id"})," - The numeric index of the chunk within the file to fetch. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"n_rows"})," - The maximum number of rows to sample from the left dataset. Defaults to None for all rows in the chunk."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"start_job",children:"start_job"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def start_job(config: Union[JobConfig, JobStepConfig],\n              *,\n              instance_type: Optional[WHITELISTED_INSTANCE_TYPES] = None,\n              region: Optional[str] = None,\n              disk_size_gb: Optional[int] = None,\n              additional_env: Optional[Sequence[str]] = (\n                  "FUSED_CREDENTIAL_PROVIDER=ec2", ),\n              image_name: Optional[str] = None) -> RunResponse\n'})}),"\n",(0,i.jsx)(n.p,{children:"Execute an operation"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"config"})," - the configuration object to run in the job."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"instance_type"}),' - The AWS EC2 instance type to use for the job. Acceptable strings are "m5.large", "m5.xlarge", "m5.2xlarge", "m5.4xlarge", "r5.large", "r5.xlarge", "r5.2xlarge", "r5.4xlarge". Defaults to None.']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"region"})," - The AWS region in which to run. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"disk_size_gb"})," - The disk size to specify for the job. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"additional_env"})," - Any additional environment variables to be passed into the job, each in the form KEY=value. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"image_name"})," - Custom image name to run. Defaults to None for default image."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"create_udf_access_token",children:"create_udf_access_token"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def create_udf_access_token(udf_email: str,\n                            udf_name: Optional[str] = None,\n                            *,\n                            client_id: Union[str, Ellipsis, None] = ...,\n                            cache: bool = True,\n                            metadata_json: Optional[Dict[str, Any]] = None,\n                            enabled: bool = True) -> UdfAccessToken\n"})}),"\n",(0,i.jsx)(n.p,{children:"Create a token for running a UDF. The token allows anyone who has it to run\nthe UDF, with the parameters they choose. The UDF will run under your environment."}),"\n",(0,i.jsx)(n.p,{children:"The token does not allow running any other UDF on your account."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"udf_email"})," - The email of the user owning the UDF, or, if udf_name is None, the name of the UDF."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"udf_name"})," - The name of the UDF to create the"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"client_id"})," - If specified, overrides which realtime environment to run the UDF under."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"cache"})," - If True, UDF tiles will be cached."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"metadata_json"})," - Additional metadata to serve as part of the tiles metadata.json."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"enable"})," - If True, the token can be used."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"get_jobs",children:"get_jobs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def get_jobs(n: int = 5,\n             *,\n             skip: int = 0,\n             per_request: int = 25,\n             max_requests: Optional[int] = 1) -> Jobs\n"})}),"\n",(0,i.jsx)(n.p,{children:"Get the job history."}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"n"})," - The number of jobs to fetch. Defaults to 5."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"skip"})," - Where in the job history to begin. Defaults to 0, which retrieves the most recent job."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"per_request"})," - Number of jobs per request to fetch. Defaults to 25."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"max_requests"})," - Maximum number of requests to make. May be None to fetch all jobs. Defaults to 1."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"The job history."}),"\n",(0,i.jsx)(n.h2,{id:"get_status",children:"get_status"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def get_status(job: CoerceableToJobId) -> RunResponse\n"})}),"\n",(0,i.jsx)(n.p,{children:"Fetch the status of a running job"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"job"})," - the identifier of a job or a ",(0,i.jsx)(n.code,{children:"RunResponse"})," object."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"The status of the given job."}),"\n",(0,i.jsx)(n.h2,{id:"get_logs",children:"get_logs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def get_logs(job: CoerceableToJobId,\n             since_ms: Optional[int] = None) -> List[Any]\n"})}),"\n",(0,i.jsx)(n.p,{children:"Fetch logs for a job"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"job"})," - the identifier of a job or a ",(0,i.jsx)(n.code,{children:"RunResponse"})," object."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"since_ms"})," - Timestamp, in milliseconds since epoch, to get logs for. Defaults to None for all logs."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"Log messages for the given job."}),"\n",(0,i.jsx)(n.h2,{id:"tail_logs",children:"tail_logs"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def tail_logs(job: CoerceableToJobId,\n              refresh_seconds: float = 1,\n              sample_logs: bool = True,\n              timeout: Optional[float] = None,\n              get_logs_retries: int = 1)\n"})}),"\n",(0,i.jsx)(n.p,{children:"Continuously print logs for a job"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"job"})," - the identifier of a job or a ",(0,i.jsx)(n.code,{children:"RunResponse"})," object."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"refresh_seconds"})," - how frequently, in seconds, to check for new logs. Defaults to 1."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"sample_logs"})," - if true, print out only a sample of logs. Defaults to True."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"timeout"})," - if not None, how long to continue tailing logs for. Defaults to None for indefinite."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"get_logs_retries"})," - Number of additional retries for log requests. Defaults to 1."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"wait_for_job",children:"wait_for_job"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def wait_for_job(job: CoerceableToJobId,\n                 poll_interval_seconds: float = 5,\n                 timeout: Optional[float] = None) -> RunResponse\n"})}),"\n",(0,i.jsx)(n.p,{children:"Block the Python kernel until the given job has finished"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"job"})," - the identifier of a job or a ",(0,i.jsx)(n.code,{children:"RunResponse"})," object."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"poll_interval_seconds"})," - How often (in seconds) to poll for status updates. Defaults to 5."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"timeout"})," - The length of time in seconds to wait for the job. Defaults to None."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Raises"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"TimeoutError"})," - if waiting for the job timed out."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"The status of the given job."}),"\n",(0,i.jsx)(n.h2,{id:"cancel_job",children:"cancel_job"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def cancel_job(job: CoerceableToJobId) -> RunResponse\n"})}),"\n",(0,i.jsx)(n.p,{children:"Cancel an existing job"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"job"})," - the identifier of a job or a ",(0,i.jsx)(n.code,{children:"RunResponse"})," object."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"A new job object."}),"\n",(0,i.jsx)(n.h2,{id:"show",children:"show"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def show(path: str,\n         *,\n         open_browser: Optional[bool] = None,\n         show_widget: Optional[bool] = None,\n         iframe_args: Sequence[Any] = ("100%", "600px"),\n         tables: Optional[Sequence[str]] = None,\n         dataset_config: Optional[Union[Dict[str, Any], VizConfig]] = None,\n         app_config: Optional[Union[Dict[str, Any], VizAppConfig]] = None,\n         include_fused_table: bool = False) -> str\n'})}),"\n",(0,i.jsx)(n.p,{children:"Visualize a dataset"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"path"})," - The path of the dataset to visualize."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"open_browser"})," - if True, attempts to open the debugging visualization in a browser window. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"show_widget"})," - if True, attempts to open the debugging visualization in a widget within this notebook. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"iframe_args"}),' - parameters to pass into the generated IFrame. Defaults to ("100%", "600px").']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"tables"})," - tables to load attributes from for visualization. Defaults to None,"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"app_config"})," - additional debugging application configuration options"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"include_fused_table"}),' - if True, ensure "fused" is in the list of tables to show.']}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"The url to the visualization page."}),"\n",(0,i.jsx)(n.h2,{id:"show_multi",children:"show_multi"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def show_multi(\n        datasets: Sequence[DatasetViz],\n        *,\n        open_browser: Optional[bool] = None,\n        show_widget: Optional[bool] = None,\n        iframe_args: Sequence[Any] = ("100%", "600px"),\n        app_config: Optional[Union[Dict[str, Any],\n                                   VizAppConfig]] = None) -> str\n'})}),"\n",(0,i.jsx)(n.p,{children:"Visualize multiple datasets"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"datasets"})," - ",(0,i.jsx)(n.code,{children:"DatasetViz"})," configuration objects."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"open_browser"})," - if True, attempts to open the debugging visualization in a browser window. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"show_widget"})," - if True, attempts to open the debugging visualization in a widget within this notebook. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"iframe_args"}),' - parameters to pass into the generated IFrame. Defaults to ("100%", "600px").']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"app_config"})," - additional debugging application configuration options"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"The url to the visualization page."}),"\n",(0,i.jsx)(n.h2,{id:"show_multi_v2",children:"show_multi_v2"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def show_multi_v2(\n        datasets: Sequence[DatasetVizV2],\n        *,\n        open_browser: Optional[bool] = None,\n        show_widget: Optional[bool] = None,\n        iframe_args: Sequence[Any] = ("100%", "600px"),\n        app_config: Optional[Union[Dict[str, Any],\n                                   VizAppConfig]] = None) -> str\n'})}),"\n",(0,i.jsx)(n.p,{children:"Visualize multiple datasets"}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"datasets"})," - ",(0,i.jsx)(n.code,{children:"DatasetVizV2"})," configuration objects."]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Arguments"}),":"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"open_browser"})," - if True, attempts to open the debugging visualization in a browser window. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"show_widget"})," - if True, attempts to open the debugging visualization in a widget within this notebook. Defaults to None."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"iframe_args"}),' - parameters to pass into the generated IFrame. Defaults to ("100%", "600px").']}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"app_config"})," - additional debugging application configuration options"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.strong,{children:"Returns"}),":"]}),"\n",(0,i.jsx)(n.p,{children:"The url to the visualization page."}),"\n",(0,i.jsx)(n.h2,{id:"_whoami",children:"_whoami"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def _whoami() -> Any\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns information on the currently logged in user"}),"\n",(0,i.jsx)(n.h2,{id:"_list_realtime_instances",children:"_list_realtime_instances"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:'def _list_realtime_instances(*, whose: str = "self") -> List[Any]\n'})}),"\n",(0,i.jsx)(n.p,{children:"Returns information about available realtime instances"}),"\n",(0,i.jsx)(n.h2,{id:"upload",children:"upload"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def upload(path: str, data: Union[bytes, BinaryIO]) -> None\n"})}),"\n",(0,i.jsx)(n.p,{children:"Upload a binary blob to a cloud location"}),"\n",(0,i.jsx)(n.h2,{id:"_upload_tmp",children:"_upload_tmp"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def _upload_tmp(extension: str, data: Union[bytes, BinaryIO]) -> str\n"})}),"\n",(0,i.jsx)(n.p,{children:"Upload a binary blob to a temporary cloud location, and return the new URL"}),"\n",(0,i.jsx)(n.h2,{id:"_replace_df_input",children:"_replace_df_input"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def _replace_df_input(\n    input: Union[str, List[str], Path,\n                 gpd.GeoDataFrame]) -> Union[str, List[str]]\n"})}),"\n",(0,i.jsx)(n.p,{children:"If the input is a DataFrame, upload it and return a URL to it. Otherwise return input unchanged."}),"\n",(0,i.jsx)(n.h2,{id:"_health",children:"_health"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def _health() -> bool\n"})}),"\n",(0,i.jsx)(n.p,{children:"Check the health of the API backend"}),"\n",(0,i.jsx)(n.h2,{id:"auth_token",children:"auth_token"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-python",children:"def auth_token() -> str\n"})}),"\n",(0,i.jsx)(n.p,{children:"Returns the current user's Fused environment (team) auth token"})]})}function h(e={}){const{wrapper:n}={...(0,l.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,n,s)=>{s.d(n,{R:()=>t,x:()=>r});var i=s(6540);const l={},o=i.createContext(l);function t(e){const n=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(l):e.components||l:t(e.components),i.createElement(o.Provider,{value:n},e.children)}}}]);