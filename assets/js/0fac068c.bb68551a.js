"use strict";(self.webpackChunkfused_docs=self.webpackChunkfused_docs||[]).push([[8336],{634:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>a,contentTitle:()=>r,default:()=>l,frontMatter:()=>i,metadata:()=>c,toc:()=>d});var t=o(4848),s=o(8453);const i={},r="HuggingFace",c={id:"basics/tutorials/huggingface",title:"HuggingFace",description:"HuggingFace is the community platform to build AI and ML. Use it with Fused to interface with models, datasets, and applications.",source:"@site/docs/basics/tutorials/huggingface.md",sourceDirName:"basics/tutorials",slug:"/basics/tutorials/huggingface",permalink:"/fused-docs/basics/tutorials/huggingface",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"H3 NYC Taxi Fare by CBG",permalink:"/fused-docs/basics/tutorials/h3-nyctaxi-face"},next:{title:"Ingest",permalink:"/fused-docs/basics/tutorials/ingest/"}},a={},d=[];function u(e){const n={code:"code",h1:"h1",li:"li",ol:"ol",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"huggingface",children:"HuggingFace"}),"\n",(0,t.jsx)(n.p,{children:"HuggingFace is the community platform to build AI and ML. Use it with Fused to interface with models, datasets, and applications."}),"\n",(0,t.jsx)(n.p,{children:"Three things to keep in mind when working with HuggingFace on Fused:"}),"\n",(0,t.jsxs)(n.ol,{children:["\n",(0,t.jsx)(n.li,{children:"Set cache directories"}),"\n",(0,t.jsxs)(n.li,{children:["Use ",(0,t.jsx)(n.code,{children:"@fused.cache"})," to ensure you download models only once."]}),"\n",(0,t.jsx)(n.li,{children:"Authenticate with a token."}),"\n"]}),"\n",(0,t.jsx)(n.pre,{children:(0,t.jsx)(n.code,{className:"language-python",children:"@fused.udf\ndef udf(bbox: fused.types.Bbox=None, n: int=10):\n    \n    import os\n    \n    import requests\n    import torch\n    from transformers import AutoImageProcessor, AutoModel\n    from huggingface_hub import hf_hub_download\n    import huggingface_hub\n\n\n    # Set HF and Torch cache directories to Fused filesystem\n    os.environ['HF_HOME'] = os.environ['HF_HUB_CACHE'] = '/mnt/cache/hf'\n    os.environ['TORCH_WHERE'] = os.environ['TORCH_HOME'] = '/mnt/cache/my_username/tmp/'\n    \n    # Use strategic caching to only download model files once\n    @fused.cache\n    def download_model_and_processor():\n        processor = AutoImageProcessor.from_pretrained('facebook/dinov2-base')\n        model = AutoModel.from_pretrained('facebook/dinov2-base')\n        return processor, model\n\n    processor, model = download_model_and_processor()\n\n    # Authenticate to HF hub with token\n    huggingface_hub.login(token='hf_...')\n    \n"})})]})}function l(e={}){const{wrapper:n}={...(0,s.R)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(u,{...e})}):u(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>r,x:()=>c});var t=o(6540);const s={},i=t.createContext(s);function r(e){const n=t.useContext(i);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:r(e.components),t.createElement(i.Provider,{value:n},e.children)}}}]);